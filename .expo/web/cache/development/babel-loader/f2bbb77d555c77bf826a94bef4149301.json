{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/components/image-picker/index.tsx\";\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as ImgPicker from \"expo-image-picker\";\nimport { BaseText } from \"../base-text\";\nimport { theme } from \"../../styles\";\nimport { styles } from \"./styles\";\nexport var ImagePicker = function ImagePicker(_ref) {\n  var imageUri = _ref.imageUri,\n      onChangeImage = _ref.onChangeImage;\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var requestPermission = function requestPermission() {\n    var _await$ImgPicker$requ, granted;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImgPicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            _await$ImgPicker$requ = _context.sent;\n            granted = _await$ImgPicker$requ.granted;\n            if (!granted) alert(\"You need to enable permission to access the library.\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePress = function handlePress() {\n    if (!imageUri) selectImage();else Alert.alert(\"Delete\", \"Are you sure you want to delete this image?\", [{\n      text: \"Yes\",\n      onPress: function onPress() {\n        return onChangeImage(null);\n      }\n    }, {\n      text: \"No\"\n    }]);\n  };\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImgPicker.launchImageLibraryAsync({\n              mediaTypes: ImgPicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 3:\n            result = _context2.sent;\n            if (!result.cancelled) onChangeImage(result.uri);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"Error reading an image\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: handlePress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, !imageUri && React.createElement(React.Fragment, null, React.createElement(MaterialCommunityIcons, {\n    color: theme.colors.dark10,\n    name: \"camera\",\n    size: 40,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), React.createElement(BaseText, {\n    style: styles.txtAddImg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"+ Add Photo\")), imageUri && React.createElement(Image, {\n    source: {\n      uri: imageUri\n    },\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/components/image-picker/index.tsx"],"names":["React","useEffect","MaterialCommunityIcons","ImgPicker","BaseText","theme","styles","ImagePicker","imageUri","onChangeImage","requestPermission","requestCameraRollPermissionsAsync","granted","alert","handlePress","selectImage","Alert","text","onPress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","cancelled","uri","console","log","container","colors","dark10","txtAddImg","image"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAEA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,OAAO,KAAKC,SAAZ,MAA2B,mBAA3B;AACA,SAASC,QAAT;AACA,SAASC,KAAT;AAGA,SAASC,MAAT;AAEA,OAAO,IAAMC,WAA4B,GAAG,SAA/BA,WAA+B,OAAiC;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AAC3ER,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEP,SAAS,CAACQ,iCAAV,EADF;;AAAA;AAAA;AAChBC,YAAAA,OADgB,yBAChBA,OADgB;AAGxB,gBAAI,CAACA,OAAL,EAAcC,KAAK,CAAC,sDAAD,CAAL;;AAHU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAMA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAI,CAACN,QAAL,EAAeO,WAAW,GAA1B,KAEEC,KAAK,CAACH,KAAN,CAAY,QAAZ,EAAsB,6CAAtB,EAAqE,CACnE;AAAEI,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,OAAO,EAAE;AAAA,eAAMT,aAAa,CAAC,IAAD,CAAnB;AAAA;AAAxB,KADmE,EAEnE;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAFmE,CAArE;AAIH,GAPD;;AASA,MAAMF,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEKZ,SAAS,CAACgB,uBAAV,CAAkC;AACrDC,cAAAA,UAAU,EAAEjB,SAAS,CAACkB,gBAAV,CAA2BC,MADc;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAAlC,CAFL;;AAAA;AAEVC,YAAAA,MAFU;AAShB,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuBlB,aAAa,CAACiB,MAAM,CAACE,GAAR,CAAb;AATP;AAAA;;AAAA;AAAA;AAAA;AAWhBC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAeA,SACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEhB,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAER,MAAM,CAACyB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACvB,QAAD,IACC,0CACE,oBAAC,sBAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAAC2B,MAAN,CAAaC,MADtB;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,IAAI,EAAE,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE3B,MAAM,CAAC4B,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANF,CAFJ,EAWG1B,QAAQ,IAAI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEoB,MAAAA,GAAG,EAAEpB;AAAP,KAAf;AAAkC,IAAA,KAAK,EAAEF,MAAM,CAAC6B,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXf,CADF,CADF;AAiBD,CApDM","sourcesContent":["import React, { useEffect } from \"react\";\nimport { View, Image, TouchableWithoutFeedback, Alert } from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as ImgPicker from \"expo-image-picker\";\nimport { BaseText } from \"@app/components/base-text\";\nimport { theme } from \"@app/styles\";\n\nimport { Props } from \"./types\";\nimport { styles } from \"./styles\";\n\nexport const ImagePicker: React.FC<Props> = ({ imageUri, onChangeImage }) => {\n  useEffect(() => {\n    requestPermission();\n  }, []);\n\n  const requestPermission = async () => {\n    const { granted } = await ImgPicker.requestCameraRollPermissionsAsync();\n    // eslint-disable-next-line no-alert\n    if (!granted) alert(\"You need to enable permission to access the library.\");\n  };\n\n  const handlePress = () => {\n    if (!imageUri) selectImage();\n    else\n      Alert.alert(\"Delete\", \"Are you sure you want to delete this image?\", [\n        { text: \"Yes\", onPress: () => onChangeImage(null) },\n        { text: \"No\" },\n      ]);\n  };\n\n  const selectImage = async () => {\n    try {\n      const result = await ImgPicker.launchImageLibraryAsync({\n        mediaTypes: ImgPicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 1,\n      });\n\n      if (!result.cancelled) onChangeImage(result.uri);\n    } catch (error) {\n      console.log(\"Error reading an image\", error);\n    }\n  };\n\n  return (\n    <TouchableWithoutFeedback onPress={handlePress}>\n      <View style={styles.container}>\n        {!imageUri && (\n          <>\n            <MaterialCommunityIcons\n              color={theme.colors.dark10}\n              name=\"camera\"\n              size={40}\n            />\n            <BaseText style={styles.txtAddImg}>+ Add Photo</BaseText>\n          </>\n        )}\n        {imageUri && <Image source={{ uri: imageUri }} style={styles.image} />}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}