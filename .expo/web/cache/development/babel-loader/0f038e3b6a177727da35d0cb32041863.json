{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-radio-group/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useField, useFormikContext } from \"formik\";\nimport { CheckBox } from \"react-native-elements\";\nimport { theme } from \"../../../styles\";\nimport { Separator } from \"../../separator\";\nexport var FormRadioGroup = React.memo(function (_ref) {\n  var name = _ref.name,\n      options = _ref.options,\n      hasSeparator = _ref.hasSeparator;\n\n  var _useField = useField(name),\n      _useField2 = _slicedToArray(_useField, 3),\n      meta = _useField2[1],\n      helpers = _useField2[2];\n\n  var _useFormikContext = useFormikContext(),\n      validateOnChange = _useFormikContext.validateOnChange;\n\n  var _useState = useState({\n    value: meta.value || meta.initialValue\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      check = _useState2[0],\n      setCheck = _useState2[1];\n\n  useEffect(function () {\n    setCheck({\n      value: meta.value\n    });\n  }, [meta.value]);\n  var handlePress = useCallback(function (val) {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setCheck({\n                value: val\n              });\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(helpers.setValue(val));\n\n            case 3:\n              if (!validateOnChange) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(helpers.setTouched(true));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }, [helpers, validateOnChange]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, options.map(function (option, key) {\n    return React.createElement(React.Fragment, {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, React.createElement(CheckBox, {\n      checked: check.value === option.id,\n      title: option.label,\n      checkedIcon: \"dot-circle-o\",\n      uncheckedIcon: \"circle-o\",\n      onPress: handlePress(option.id),\n      checkedColor: theme.colors.primary,\n      titleProps: {\n        style: _objectSpread(_objectSpread({}, theme.textRegular), {}, {\n          fontWeight: \"400\",\n          marginLeft: 8\n        })\n      },\n      containerStyle: {\n        backgroundColor: \"transparent\",\n        borderWidth: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }), hasSeparator && React.createElement(Separator, {\n      containerStyle: {\n        marginTop: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 32\n      }\n    }));\n  }));\n});\nFormRadioGroup.displayName = \"FormRadioGroup\";","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-radio-group/index.tsx"],"names":["React","useState","useEffect","useCallback","useField","useFormikContext","CheckBox","theme","Separator","FormRadioGroup","memo","name","options","hasSeparator","meta","helpers","validateOnChange","value","initialValue","check","setCheck","handlePress","val","setValue","setTouched","map","option","key","id","label","colors","primary","style","textRegular","fontWeight","marginLeft","backgroundColor","borderWidth","margin","marginTop","displayName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useField, useFormikContext } from \"formik\";\nimport { CheckBox } from \"react-native-elements\";\nimport { theme } from \"@app/styles\";\nimport { Separator } from \"@app/components/separator\";\n\nimport { Props } from \"./types\";\n\nexport const FormRadioGroup: React.FC<Props> = React.memo(\n  ({ name, options, hasSeparator }) => {\n    const [, meta, helpers] = useField(name);\n    const { validateOnChange } = useFormikContext();\n\n    const [check, setCheck] = useState({\n      value: meta.value || meta.initialValue,\n    });\n\n    useEffect(() => {\n      setCheck({\n        value: meta.value,\n      });\n    }, [meta.value]);\n\n    const handlePress = useCallback(\n      (val) => async () => {\n        setCheck({ value: val });\n\n        await helpers.setValue(val);\n\n        if (validateOnChange) {\n          await helpers.setTouched(true);\n        }\n      },\n      [helpers, validateOnChange]\n    );\n\n    return (\n      <React.Fragment>\n        {options.map((option, key) => {\n          return (\n            <React.Fragment key={key}>\n              <CheckBox\n                checked={check.value === option.id}\n                title={option.label}\n                checkedIcon=\"dot-circle-o\"\n                uncheckedIcon=\"circle-o\"\n                onPress={handlePress(option.id)}\n                checkedColor={theme.colors.primary}\n                titleProps={{\n                  style: {\n                    ...theme.textRegular,\n                    fontWeight: \"400\",\n                    marginLeft: 8,\n                  },\n                }}\n                containerStyle={{\n                  backgroundColor: \"transparent\",\n                  borderWidth: 0,\n                  margin: 0,\n                }}\n              />\n              {hasSeparator && <Separator containerStyle={{ marginTop: 5 }} />}\n            </React.Fragment>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n);\n\nFormRadioGroup.displayName = \"FormRadioGroup\";\n"]},"metadata":{},"sourceType":"module"}