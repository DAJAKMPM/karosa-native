{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(callLoginApi),\n    _marked2 = _regeneratorRuntime.mark(callRegisterApi),\n    _marked3 = _regeneratorRuntime.mark(callForgotApi),\n    _marked4 = _regeneratorRuntime.mark(callMyAddressApi),\n    _marked5 = _regeneratorRuntime.mark(callNewAddressApi),\n    _marked6 = _regeneratorRuntime.mark(onLoginSaga),\n    _marked7 = _regeneratorRuntime.mark(onRegisterSaga),\n    _marked8 = _regeneratorRuntime.mark(onForgotSaga),\n    _marked9 = _regeneratorRuntime.mark(onMyAddressSaga),\n    _marked10 = _regeneratorRuntime.mark(onNewAddressSaga),\n    _marked11 = _regeneratorRuntime.mark(_callee);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\nimport { baseAxios } from \"../../config/axios/instance\";\nimport apiEndpoints from \"../api-endpoints.json\";\nimport * as actions from \"./actions\";\nexport function callLoginApi(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function callLoginApi$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(baseAxios.post, apiEndpoints.login, action.payload);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put(actions.callLoginApi.success(response.data));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(actions.callLoginApi.failure(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function callRegisterApi(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function callRegisterApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(baseAxios.post, apiEndpoints.register, action.payload);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put(actions.callRegisterApi.success(response.data));\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(actions.callRegisterApi.failure(_context2.t0));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nexport function callForgotApi() {\n  var mockRes;\n  return _regeneratorRuntime.wrap(function callForgotApi$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          mockRes = {\n            message: \"Kindly check your email / messages for the generated password. \"\n          };\n          _context3.next = 4;\n          return put(actions.callForgotApi.success(mockRes));\n\n        case 4:\n          _context3.next = 10;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 10;\n          return put(actions.callLoginApi.failure(_context3.t0));\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\nexport function callMyAddressApi() {\n  var response;\n  return _regeneratorRuntime.wrap(function callMyAddressApi$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(baseAxios.get, apiEndpoints.addresses);\n\n        case 3:\n          response = _context4.sent;\n          _context4.next = 6;\n          return put(actions.callMyAddressApi.success(response.data));\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put(actions.callMyAddressApi.failure(_context4.t0));\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\nexport function callNewAddressApi(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function callNewAddressApi$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(baseAxios.post, apiEndpoints.addresses, action.payload);\n\n        case 3:\n          response = _context5.sent;\n          _context5.next = 6;\n          return put(actions.callNewAddressApi.success(response.data));\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put(actions.callNewAddressApi.failure(_context5.t0));\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\nexport function onLoginSaga() {\n  return _regeneratorRuntime.wrap(function onLoginSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(getType(actions.callLoginApi.request), callLoginApi);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function onRegisterSaga() {\n  return _regeneratorRuntime.wrap(function onRegisterSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(getType(actions.callRegisterApi.request), callRegisterApi);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function onForgotSaga() {\n  return _regeneratorRuntime.wrap(function onForgotSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(getType(actions.callForgotApi.request), callForgotApi);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport function onMyAddressSaga() {\n  return _regeneratorRuntime.wrap(function onMyAddressSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(getType(actions.callMyAddressApi.request), callMyAddressApi);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\nexport function onNewAddressSaga() {\n  return _regeneratorRuntime.wrap(function onNewAddressSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(getType(actions.callNewAddressApi.request), callNewAddressApi);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([call(onLoginSaga), call(onForgotSaga), call(onMyAddressSaga), call(onNewAddressSaga), call(onRegisterSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/redux/auth/sagas.ts"],"names":["callLoginApi","callRegisterApi","callForgotApi","callMyAddressApi","callNewAddressApi","onLoginSaga","onRegisterSaga","onForgotSaga","onMyAddressSaga","onNewAddressSaga","all","call","put","takeLatest","getType","baseAxios","apiEndpoints","actions","action","post","login","payload","response","success","data","failure","register","mockRes","message","get","addresses","request"],"mappings":"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","sourcesContent":["import { SagaIterator } from \"@redux-saga/core\";\nimport { AxiosResponse } from \"axios\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\n\nimport { baseAxios } from \"../../config/axios/instance\";\nimport apiEndpoints from \"../api-endpoints.json\";\n\nimport * as actions from \"./actions\";\nimport * as models from \"./models\";\n\nexport function* callLoginApi(\n  action: ReturnType<typeof actions.callLoginApi.request>\n): SagaIterator {\n  try {\n    const response: AxiosResponse<models.LoginResponse> = yield call(\n      baseAxios.post,\n      apiEndpoints.login,\n      action.payload\n    );\n\n    yield put(actions.callLoginApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callLoginApi.failure(error));\n  }\n}\n\nexport function* callRegisterApi(\n  action: ReturnType<typeof actions.callRegisterApi.request>\n): SagaIterator {\n  try {\n    const response: AxiosResponse<models.RegisterResponse> = yield call(\n      baseAxios.post,\n      apiEndpoints.register,\n      action.payload\n    );\n\n    yield put(actions.callRegisterApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callRegisterApi.failure(error));\n  }\n}\n\nexport function* callForgotApi(): SagaIterator {\n  try {\n    const mockRes = {\n      message:\n        \"Kindly check your email / messages for the generated password. \",\n    };\n\n    yield put(actions.callForgotApi.success(mockRes));\n  } catch (error) {\n    yield put(actions.callLoginApi.failure(error));\n  }\n}\n\nexport function* callMyAddressApi(): SagaIterator {\n  try {\n    const response: AxiosResponse<models.MyAddressResponse> = yield call(\n      baseAxios.get,\n      apiEndpoints.addresses\n    );\n\n    yield put(actions.callMyAddressApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callMyAddressApi.failure(error));\n  }\n}\n\n// export function* callNewAddressApi(): SagaIterator {\n//   try {\n//     const response: AxiosResponse<models.NewAddressResponse> = yield call(\n//       baseAxios.post,\n//       apiEndpoints.addresses\n//     );\n\n//     yield put(actions.callNewAddressApi.success(response.data));\n//   } catch (error) {\n//     yield put(actions.callNewAddressApi.failure(error));\n//   }\n// }\n\nexport function* callNewAddressApi(\n  action: ReturnType<typeof actions.callNewAddressApi.request>\n): SagaIterator {\n  try {\n    const response: AxiosResponse<models.NewAddressResponse> = yield call(\n      baseAxios.post,\n      apiEndpoints.addresses,\n      action.payload\n    );\n\n    yield put(actions.callNewAddressApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callNewAddressApi.failure(error));\n  }\n}\n\nexport function* onLoginSaga() {\n  yield takeLatest(getType(actions.callLoginApi.request), callLoginApi);\n}\n\nexport function* onRegisterSaga() {\n  yield takeLatest(getType(actions.callRegisterApi.request), callRegisterApi);\n}\n\nexport function* onForgotSaga() {\n  yield takeLatest(getType(actions.callForgotApi.request), callForgotApi);\n}\n\nexport function* onMyAddressSaga() {\n  yield takeLatest(getType(actions.callMyAddressApi.request), callMyAddressApi);\n}\n\nexport function* onNewAddressSaga() {\n  yield takeLatest(\n    getType(actions.callNewAddressApi.request),\n    callNewAddressApi\n  );\n}\n\nexport default function* () {\n  yield all([\n    call(onLoginSaga),\n    call(onForgotSaga),\n    call(onMyAddressSaga),\n    call(onNewAddressSaga),\n    call(onRegisterSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}