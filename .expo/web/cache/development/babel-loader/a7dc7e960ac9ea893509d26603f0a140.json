{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(callCategoryListApi),\n    _marked2 = _regeneratorRuntime.mark(onCallCategoryListSaga),\n    _marked3 = _regeneratorRuntime.mark(_callee);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\nimport { baseAxios } from \"../../config/axios/instance\";\nimport apiEndpoints from \"../api-endpoints.json\";\nimport * as actions from \"./actions\";\nexport function callCategoryListApi() {\n  var response;\n  return _regeneratorRuntime.wrap(function callCategoryListApi$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(baseAxios.get, apiEndpoints.categories);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put(actions.callCategoryListApi.success(response.data));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(actions.callCategoryListApi.failure(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function onCallCategoryListSaga() {\n  return _regeneratorRuntime.wrap(function onCallCategoryListSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(getType(actions.callCategoryListApi.request), callCategoryListApi);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(onCallCategoryListSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/redux/category/sagas.ts"],"names":["callCategoryListApi","onCallCategoryListSaga","all","call","put","takeLatest","getType","baseAxios","apiEndpoints","actions","get","categories","response","success","data","failure","request"],"mappings":";;uCAWiBA,mB;wCAaAC,sB;;;AAtBjB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,SAASC,SAAT;AACA,OAAOC,YAAP;AAEA,OAAO,KAAKC,OAAZ;AAGA,OAAO,SAAUT,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE0D,iBAAMG,IAAI,CACrEI,SAAS,CAACG,GAD2D,EAErEF,YAAY,CAACG,UAFwD,CAAV;;AAF1D;AAEGC,UAAAA,QAFH;AAAA;AAOH,iBAAMR,GAAG,CAACK,OAAO,CAACT,mBAAR,CAA4Ba,OAA5B,CAAoCD,QAAQ,CAACE,IAA7C,CAAD,CAAT;;AAPG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASH,iBAAMV,GAAG,CAACK,OAAO,CAACT,mBAAR,CAA4Be,OAA5B,aAAD,CAAT;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAUd,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,UAAU,CACdC,OAAO,CAACG,OAAO,CAACT,mBAAR,CAA4BgB,OAA7B,CADO,EAEdhB,mBAFc,CAAhB;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CAACC,IAAI,CAACF,sBAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { SagaIterator } from \"@redux-saga/core\";\nimport { AxiosResponse } from \"axios\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\n\nimport { baseAxios } from \"../../config/axios/instance\";\nimport apiEndpoints from \"../api-endpoints.json\";\n\nimport * as actions from \"./actions\";\nimport * as models from \"./models\";\n\nexport function* callCategoryListApi(): SagaIterator {\n  try {\n    const response: AxiosResponse<models.CategoryListResponse> = yield call(\n      baseAxios.get,\n      apiEndpoints.categories\n    );\n\n    yield put(actions.callCategoryListApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callCategoryListApi.failure(error));\n  }\n}\n\nexport function* onCallCategoryListSaga() {\n  yield takeLatest(\n    getType(actions.callCategoryListApi.request),\n    callCategoryListApi\n  );\n}\n\nexport default function* () {\n  yield all([call(onCallCategoryListSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}