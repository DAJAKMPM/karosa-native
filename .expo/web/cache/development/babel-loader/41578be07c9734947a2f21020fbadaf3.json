{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(callRegionApi),\n    _marked2 = _regeneratorRuntime.mark(callProvinceApi),\n    _marked3 = _regeneratorRuntime.mark(callCitiesApi),\n    _marked4 = _regeneratorRuntime.mark(callBarangayApi),\n    _marked5 = _regeneratorRuntime.mark(onCitiesSaga),\n    _marked6 = _regeneratorRuntime.mark(onBarangaySaga),\n    _marked7 = _regeneratorRuntime.mark(onRegionSaga),\n    _marked8 = _regeneratorRuntime.mark(onProvinceSaga),\n    _marked9 = _regeneratorRuntime.mark(_callee);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\nimport { baseAxios } from \"../../config/axios/instance\";\nimport apiEndpoints from \"../api-endpoints.json\";\nimport * as actions from \"./actions\";\nexport function callRegionApi() {\n  var response;\n  return _regeneratorRuntime.wrap(function callRegionApi$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(baseAxios.get, apiEndpoints.regions);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put(actions.callRegionApi.success(response.data));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(actions.callRegionApi.failure(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function callProvinceApi(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function callProvinceApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(baseAxios.get, apiEndpoints.province.replace(\"{regionId}\", String(action.payload.regionId)));\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put(actions.callProvinceApi.success(response.data));\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(actions.callProvinceApi.failure(_context2.t0));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nexport function callCitiesApi(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function callCitiesApi$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(baseAxios.get, apiEndpoints.cities.replace(\"{provinceId}\", String(action.payload.provinceId)));\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return put(actions.callCitiesApi.success(response.data));\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put(actions.callCitiesApi.failure(_context3.t0));\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\nexport function callBarangayApi(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function callBarangayApi$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(baseAxios.get, apiEndpoints.barangay.replace(\"{cityId}\", String(action.payload.cityId)));\n\n        case 3:\n          response = _context4.sent;\n          _context4.next = 6;\n          return put(actions.callBarangayApi.success(response.data));\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put(actions.callBarangayApi.failure(_context4.t0));\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\nexport function onCitiesSaga() {\n  return _regeneratorRuntime.wrap(function onCitiesSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(getType(actions.callCitiesApi.request), callCitiesApi);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function onBarangaySaga() {\n  return _regeneratorRuntime.wrap(function onBarangaySaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(getType(actions.callBarangayApi.request), callBarangayApi);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function onRegionSaga() {\n  return _regeneratorRuntime.wrap(function onRegionSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(getType(actions.callRegionApi.request), callRegionApi);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function onProvinceSaga() {\n  return _regeneratorRuntime.wrap(function onProvinceSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(getType(actions.callProvinceApi.request), callProvinceApi);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([call(onRegionSaga), call(onProvinceSaga), call(onBarangaySaga), call(onCitiesSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/redux/location/sagas.ts"],"names":["callRegionApi","callProvinceApi","callCitiesApi","callBarangayApi","onCitiesSaga","onBarangaySaga","onRegionSaga","onProvinceSaga","all","call","put","takeLatest","getType","baseAxios","apiEndpoints","actions","get","regions","response","success","data","failure","action","province","replace","String","payload","regionId","cities","provinceId","barangay","cityId","request"],"mappings":"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","sourcesContent":["import { SagaIterator } from \"@redux-saga/core\";\nimport { AxiosResponse } from \"axios\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getType } from \"typesafe-actions\";\n\nimport { baseAxios } from \"../../config/axios/instance\";\nimport apiEndpoints from \"../api-endpoints.json\";\n\nimport * as actions from \"./actions\";\nimport * as models from \"./models\";\n\nexport function* callRegionApi(): SagaIterator {\n  try {\n    const response: AxiosResponse<models.RegionResponse> = yield call(\n      baseAxios.get,\n      apiEndpoints.regions\n    );\n\n    yield put(actions.callRegionApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callRegionApi.failure(error));\n  }\n}\n\nexport function* callProvinceApi(\n  action: ReturnType<typeof actions.callProvinceApi.request>\n): SagaIterator {\n  try {\n    const response: AxiosResponse<models.ProvinceResponse> = yield call(\n      baseAxios.get,\n      apiEndpoints.province.replace(\n        \"{regionId}\",\n        String(action.payload.regionId)\n      )\n    );\n    yield put(actions.callProvinceApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callProvinceApi.failure(error));\n  }\n}\n\nexport function* callCitiesApi(\n  action: ReturnType<typeof actions.callCitiesApi.request>\n): SagaIterator {\n  try {\n    const response: AxiosResponse<models.CitiesResponse> = yield call(\n      baseAxios.get,\n      apiEndpoints.cities.replace(\n        \"{provinceId}\",\n        String(action.payload.provinceId)\n      )\n    );\n\n    yield put(actions.callCitiesApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callCitiesApi.failure(error));\n  }\n}\n\nexport function* callBarangayApi(\n  action: ReturnType<typeof actions.callBarangayApi.request>\n): SagaIterator {\n  try {\n    const response: AxiosResponse<models.BarangayResponse> = yield call(\n      baseAxios.get,\n      apiEndpoints.barangay.replace(\"{cityId}\", String(action.payload.cityId))\n    );\n\n    yield put(actions.callBarangayApi.success(response.data));\n  } catch (error) {\n    yield put(actions.callBarangayApi.failure(error));\n  }\n}\n\nexport function* onCitiesSaga() {\n  yield takeLatest(getType(actions.callCitiesApi.request), callCitiesApi);\n}\nexport function* onBarangaySaga() {\n  yield takeLatest(getType(actions.callBarangayApi.request), callBarangayApi);\n}\n\nexport function* onRegionSaga() {\n  yield takeLatest(getType(actions.callRegionApi.request), callRegionApi);\n}\n\nexport function* onProvinceSaga() {\n  yield takeLatest(getType(actions.callProvinceApi.request), callProvinceApi);\n}\n\nexport default function* () {\n  yield all([\n    call(onRegionSaga),\n    call(onProvinceSaga),\n    call(onBarangaySaga),\n    call(onCitiesSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}