{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/screens/products/add-product/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { equals } from \"ramda\";\nimport { batch, useDispatch } from \"react-redux\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Header } from \"react-native-elements\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { theme } from \"../../../styles\";\nimport { Screen } from \"../../../components/base-screen\";\nimport { ListImage } from \"../../../components/list/list-image\";\nimport { ListInput } from \"../../../components/list/list-input\";\nimport { ListChevron } from \"../../../components/list/list-chevron\";\nimport { ListSwitch } from \"../../../components/list/list-switch\";\nimport { ListStatus } from \"../../../components/list/list-status\";\nimport { useMemoizedSelector } from \"../../../hooks\";\nimport { actions, selectors } from \"../../../redux/shop\";\nimport { initShopState } from \"../../../redux/shop/data\";\nimport routes from \"../../../navigators/routes\";\nimport ProductStatusModal from \"../product-status\";\nimport AvailabilityModal from \"../availability\";\nimport MeasurementModal from \"../measurement\";\nimport { validationSchema } from \"./validation\";\nimport { styles } from \"./styles\";\n\nvar AddProductScreen = function AddProductScreen() {\n  var dispatch = useDispatch();\n  var productStatusRef = useRef(null);\n  var availabilityRef = useRef(null);\n  var measurementRef = useRef(null);\n\n  var _useNavigation = useNavigation(),\n      goBack = _useNavigation.goBack,\n      navigate = _useNavigation.navigate;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitted = _useState2[0],\n      setSubmitted = _useState2[1];\n\n  var callAddProductApi = useCallback(function (request) {\n    return dispatch(actions.callAddProductApi.request(request));\n  }, [dispatch]);\n  var clearProductEntry = useCallback(function () {\n    return dispatch(actions.clearProductEntry());\n  }, [dispatch]);\n  var setProductForm = useCallback(function (values) {\n    return dispatch(actions.setProductForm(values));\n  }, [dispatch]);\n  var productForm = useMemoizedSelector(selectors.getProductForm);\n  var productStatus = useMemoizedSelector(selectors.getProductStatus);\n  var addProductResponse = useMemoizedSelector(selectors.getAddProductResponse);\n  var successResponse = useMemo(function () {\n    return !addProductResponse.isLoading && !equals(addProductResponse.response, initShopState.addProductResponse.response);\n  }, [addProductResponse.isLoading, addProductResponse.response]);\n  useEffect(function () {\n    if (successResponse) if (submitted) {\n      goBack();\n    }\n  }, [successResponse]);\n  var formikBag = useFormik({\n    initialValues: productForm,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      batch(function () {\n        callAddProductApi({\n          name: values.productNm,\n          categoryId: productForm.categoryId,\n          description: values.description\n        });\n        setProductForm(values);\n        clearProductEntry();\n      });\n      setSubmitted(true);\n    }\n  });\n  var status = useMemo(function () {\n    if (productStatus.harvesting) return {\n      value: \"Harvesting\",\n      color: theme.colors.gold5\n    };\n    if (productStatus.planting) return {\n      value: \"Planting\",\n      color: theme.colors.dark5\n    };\n    return {\n      value: \"Available\",\n      color: theme.colors.primary\n    };\n  }, [productStatus]);\n  var screenProps = {\n    customHeader: React.createElement(Header, {\n      containerStyle: {\n        backgroundColor: \"transparent\"\n      },\n      leftComponent: {\n        icon: \"arrow-back\",\n        color: theme.colors.primary,\n        onPress: function onPress() {\n          goBack();\n          clearProductEntry();\n        }\n      },\n      centerComponent: {\n        text: \"Add Product\",\n        style: _objectSpread(_objectSpread({}, theme.textRegular), {}, {\n          fontWeight: \"700\",\n          alignSelf: \"center\"\n        })\n      },\n      rightComponent: {\n        text: \"Save\",\n        onPress: formikBag.submitForm,\n        style: _objectSpread(_objectSpread({}, theme.textRegular), {}, {\n          fontWeight: \"400\",\n          color: theme.colors.dark10\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }),\n    isLoading: addProductResponse.isLoading,\n    customStyles: styles.container\n  };\n\n  var listInput = function listInput(name, orientation, label, placeholder) {\n    return React.createElement(ListInput, {\n      isColumn: orientation === \"column\" ? true : false,\n      isRow: orientation === \"row\" ? true : false,\n      hasBottomDivider: true,\n      maxLength: name === \"productNm\" ? 100 : 1000,\n      required: true,\n      name: name,\n      label: label,\n      placeholder: placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var listChevron = function listChevron(title, required, onPress) {\n    return React.createElement(ListChevron, {\n      title: title,\n      required: required,\n      onPress: onPress,\n      hasBottomDivider: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var listStatus = function listStatus(statusCb) {\n    return React.createElement(ListStatus, {\n      hasBottomDivider: true,\n      title: \"Status\",\n      required: true,\n      onPress: statusCb,\n      color: status.color,\n      value: status.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var listSwitch = function listSwitch() {\n    return React.createElement(ListSwitch, {\n      title: \"Pre-order\",\n      hasBottomDivider: true,\n      name: \"preOrder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 5\n      }\n    });\n  };\n\n  var listImage = function listImage() {\n    return React.createElement(ListImage, {\n      name: \"productImg\",\n      hasBottomDivider: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 27\n      }\n    });\n  };\n\n  var listIterator = function listIterator(listItems) {\n    return listItems.map(function (item, key) {\n      return React.createElement(React.Fragment, {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 7\n        }\n      }, item);\n    });\n  };\n\n  var listDisplay = function listDisplay() {\n    var elements = [];\n\n    var statusCb = function statusCb() {\n      var _productStatusRef$cur;\n\n      return (_productStatusRef$cur = productStatusRef.current) == null ? void 0 : _productStatusRef$cur.open();\n    };\n\n    var availabilityCb = function availabilityCb() {\n      var _availabilityRef$curr;\n\n      return (_availabilityRef$curr = availabilityRef.current) == null ? void 0 : _availabilityRef$curr.open();\n    };\n\n    var measurementCb = function measurementCb() {\n      var _measurementRef$curre;\n\n      return (_measurementRef$curre = measurementRef.current) == null ? void 0 : _measurementRef$curre.open();\n    };\n\n    var variationCb = function variationCb() {\n      return navigate(routes.ADD_VARIATION);\n    };\n\n    var wholesaleCb = function wholesaleCb() {\n      return navigate(routes.ADD_WHOLESALE);\n    };\n\n    var shippingDetCb = function shippingDetCb() {\n      return navigate(routes.SHIPPING_DETAILS);\n    };\n\n    var categoryCb = function categoryCb() {\n      return navigate(routes.CHOOSE_CATEGORY);\n    };\n\n    var price = listInput(\"price\", \"row\", \"Price\", \"Set price per product\");\n    var stocks = listInput(\"stocks\", \"row\", \"Stocks\", \"Set Stock\");\n    var productNm = listInput(\"productNm\", \"column\", \"Product Name\", \"Enter Product Name\");\n    var description = listInput(\"description\", \"column\", \"Description\", \"Enter Description\");\n    var shelfLife = listInput(\"shelfLife\", \"row\", \"Shelf Life\", \"Set Shelf Life\");\n    var weight = listInput(\"weight\", \"row\", \"Weight per product\", \"Set Weight\");\n    var categories = listChevron(\"Categories\", true, categoryCb);\n    var unit = listChevron(\"Unit of Measurement\", true, measurementCb);\n    var availability = listChevron(\"Availability\", false, availabilityCb);\n    var variation = listChevron(\"Variation\", false, variationCb);\n    var wholesale = listChevron(\"Wholesale\", false, wholesaleCb);\n    var shippingDetails = listChevron(\"Shipping Details\", false, shippingDetCb);\n    elements.push(listImage(), productNm, description, categories, price, unit, weight, stocks, shelfLife, listStatus(statusCb), availability, variation, wholesale, listSwitch(), shippingDetails);\n    return listIterator(elements);\n  };\n\n  return React.createElement(FormikContext.Provider, {\n    value: formikBag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }\n  }, React.createElement(Screen, _extends({}, screenProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  }, listDisplay()), React.createElement(View, {\n    style: styles.spacer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  })), React.createElement(ProductStatusModal, {\n    sheetRef: productStatusRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }), React.createElement(AvailabilityModal, {\n    sheetRef: availabilityRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }), React.createElement(MeasurementModal, {\n    sheetRef: measurementRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default AddProductScreen;","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/screens/products/add-product/index.tsx"],"names":["React","useState","useEffect","useCallback","useMemo","useRef","equals","batch","useDispatch","Header","useNavigation","FormikContext","useFormik","theme","Screen","ListImage","ListInput","ListChevron","ListSwitch","ListStatus","useMemoizedSelector","actions","selectors","initShopState","routes","ProductStatusModal","AvailabilityModal","MeasurementModal","validationSchema","styles","AddProductScreen","dispatch","productStatusRef","availabilityRef","measurementRef","goBack","navigate","submitted","setSubmitted","callAddProductApi","request","clearProductEntry","setProductForm","values","productForm","getProductForm","productStatus","getProductStatus","addProductResponse","getAddProductResponse","successResponse","isLoading","response","formikBag","initialValues","validateOnBlur","validateOnChange","onSubmit","name","productNm","categoryId","description","status","harvesting","value","color","colors","gold5","planting","dark5","primary","screenProps","customHeader","backgroundColor","icon","onPress","text","style","textRegular","fontWeight","alignSelf","submitForm","dark10","customStyles","container","listInput","orientation","label","placeholder","listChevron","title","required","listStatus","statusCb","listSwitch","listImage","listIterator","listItems","map","item","key","listDisplay","elements","current","open","availabilityCb","measurementCb","variationCb","ADD_VARIATION","wholesaleCb","ADD_WHOLESALE","shippingDetCb","SHIPPING_DETAILS","categoryCb","CHOOSE_CATEGORY","price","stocks","shelfLife","weight","categories","unit","availability","variation","wholesale","shippingDetails","push","spacer"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { equals } from \"ramda\";\nimport { batch, useDispatch } from \"react-redux\";\nimport { ScrollView, View } from \"react-native\";\nimport { Header } from \"react-native-elements\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { FormikContext, useFormik } from \"formik\";\nimport RBSheet from \"react-native-raw-bottom-sheet\";\nimport { theme } from \"@app/styles\";\nimport { Screen } from \"@app/components/base-screen\";\nimport { ListImage } from \"@app/components/list/list-image\";\nimport { ListInput } from \"@app/components/list/list-input\";\nimport { ListChevron } from \"@app/components/list/list-chevron\";\nimport { ListSwitch } from \"@app/components/list/list-switch\";\nimport { ListStatus } from \"@app/components/list/list-status\";\nimport { Props as ScreenProps } from \"@app/components/base-screen/types\";\nimport { useMemoizedSelector } from \"@app/hooks\";\nimport { actions, selectors } from \"@app/redux/shop\";\nimport { initShopState } from \"@app/redux/shop/data\";\nimport { AddProductRequest, ProductForm } from \"@app/redux/shop/models\";\nimport routes from \"@app/navigators/routes\";\n\nimport ProductStatusModal from \"../product-status\";\nimport AvailabilityModal from \"../availability\";\nimport MeasurementModal from \"../measurement\";\n\nimport { validationSchema } from \"./validation\";\nimport { styles } from \"./styles\";\n\nconst AddProductScreen: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const productStatusRef = useRef<RBSheet>(null);\n  const availabilityRef = useRef<RBSheet>(null);\n  const measurementRef = useRef<RBSheet>(null);\n\n  const { goBack, navigate } = useNavigation();\n\n  const [submitted, setSubmitted] = useState(false);\n\n  const callAddProductApi = useCallback(\n    (request: AddProductRequest) =>\n      dispatch(actions.callAddProductApi.request(request)),\n    [dispatch]\n  );\n\n  const clearProductEntry = useCallback(\n    () => dispatch(actions.clearProductEntry()),\n    [dispatch]\n  );\n\n  const setProductForm = useCallback(\n    (values: ProductForm) => dispatch(actions.setProductForm(values)),\n    [dispatch]\n  );\n\n  const productForm = useMemoizedSelector(selectors.getProductForm);\n  const productStatus = useMemoizedSelector(selectors.getProductStatus);\n\n  const addProductResponse = useMemoizedSelector(\n    selectors.getAddProductResponse\n  );\n\n  const successResponse = useMemo(() => {\n    return (\n      !addProductResponse.isLoading &&\n      !equals(\n        addProductResponse.response,\n        initShopState.addProductResponse.response\n      )\n    );\n  }, [addProductResponse.isLoading, addProductResponse.response]);\n\n  useEffect(() => {\n    if (successResponse)\n      if (submitted) {\n        goBack();\n      }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [successResponse]);\n\n  const formikBag = useFormik({\n    initialValues: productForm,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validationSchema,\n    onSubmit: (values) => {\n      batch(() => {\n        callAddProductApi({\n          name: values.productNm,\n          categoryId: productForm.categoryId,\n          description: values.description,\n        });\n        setProductForm(values);\n        clearProductEntry();\n      });\n\n      setSubmitted(true);\n    },\n  });\n\n  const status = useMemo(() => {\n    if (productStatus.harvesting)\n      return { value: \"Harvesting\", color: theme.colors.gold5 };\n\n    if (productStatus.planting)\n      return { value: \"Planting\", color: theme.colors.dark5 };\n\n    return { value: \"Available\", color: theme.colors.primary };\n  }, [productStatus]);\n\n  const screenProps: ScreenProps = {\n    customHeader: (\n      <Header\n        containerStyle={{ backgroundColor: \"transparent\" }}\n        leftComponent={{\n          icon: \"arrow-back\",\n          color: theme.colors.primary,\n          onPress: () => {\n            goBack();\n            clearProductEntry();\n          },\n        }}\n        centerComponent={{\n          text: \"Add Product\",\n          style: {\n            ...theme.textRegular,\n            fontWeight: \"700\",\n            alignSelf: \"center\",\n          },\n        }}\n        rightComponent={{\n          text: \"Save\",\n          onPress: formikBag.submitForm,\n          style: {\n            ...theme.textRegular,\n            fontWeight: \"400\",\n            color: theme.colors.dark10,\n          },\n        }}\n      />\n    ),\n    isLoading: addProductResponse.isLoading,\n    customStyles: styles.container,\n  };\n\n  const listInput = (\n    name: string,\n    orientation: string,\n    label: string,\n    placeholder: string\n  ): JSX.Element => {\n    return (\n      <ListInput\n        isColumn={orientation === \"column\" ? true : false}\n        isRow={orientation === \"row\" ? true : false}\n        hasBottomDivider\n        maxLength={name === \"productNm\" ? 100 : 1000}\n        required\n        name={name}\n        label={label}\n        placeholder={placeholder}\n      />\n    );\n  };\n\n  const listChevron = (\n    title: string,\n    required: boolean,\n    onPress: VoidFunction\n  ): JSX.Element => {\n    return (\n      <ListChevron\n        title={title}\n        required={required}\n        onPress={onPress}\n        hasBottomDivider\n      />\n    );\n  };\n\n  const listStatus = (statusCb: VoidFunction) => {\n    return (\n      <ListStatus\n        hasBottomDivider\n        title={\"Status\"}\n        required\n        onPress={statusCb}\n        color={status.color}\n        value={status.value}\n      />\n    );\n  };\n\n  const listSwitch = () => (\n    <ListSwitch title={\"Pre-order\"} hasBottomDivider name={\"preOrder\"} />\n  );\n\n  const listImage = () => <ListImage name={\"productImg\"} hasBottomDivider />;\n\n  const listIterator = (listItems: React.ReactElement[]) => {\n    return listItems.map((item, key) => (\n      <React.Fragment key={key}>{item}</React.Fragment>\n    ));\n  };\n\n  const listDisplay = (): React.ReactElement[] => {\n    const elements: React.ReactElement[] = [];\n\n    const statusCb = () => productStatusRef.current?.open();\n    const availabilityCb = () => availabilityRef.current?.open();\n    const measurementCb = () => measurementRef.current?.open();\n    const variationCb = () => navigate(routes.ADD_VARIATION);\n    const wholesaleCb = () => navigate(routes.ADD_WHOLESALE);\n    const shippingDetCb = () => navigate(routes.SHIPPING_DETAILS);\n    const categoryCb = () => navigate(routes.CHOOSE_CATEGORY);\n\n    const price = listInput(\"price\", \"row\", \"Price\", \"Set price per product\");\n    const stocks = listInput(\"stocks\", \"row\", \"Stocks\", \"Set Stock\");\n    const productNm = listInput(\n      \"productNm\",\n      \"column\",\n      \"Product Name\",\n      \"Enter Product Name\"\n    );\n    const description = listInput(\n      \"description\",\n      \"column\",\n      \"Description\",\n      \"Enter Description\"\n    );\n    const shelfLife = listInput(\n      \"shelfLife\",\n      \"row\",\n      \"Shelf Life\",\n      \"Set Shelf Life\"\n    );\n    const weight = listInput(\n      \"weight\",\n      \"row\",\n      \"Weight per product\",\n      \"Set Weight\"\n    );\n\n    const categories = listChevron(\"Categories\", true, categoryCb);\n    const unit = listChevron(\"Unit of Measurement\", true, measurementCb);\n    const availability = listChevron(\"Availability\", false, availabilityCb);\n    const variation = listChevron(\"Variation\", false, variationCb);\n    const wholesale = listChevron(\"Wholesale\", false, wholesaleCb);\n    const shippingDetails = listChevron(\n      \"Shipping Details\",\n      false,\n      shippingDetCb\n    );\n\n    elements.push(\n      listImage(),\n      productNm,\n      description,\n      categories,\n      price,\n      unit,\n      weight,\n      stocks,\n      shelfLife,\n      listStatus(statusCb),\n      availability,\n      variation,\n      wholesale,\n      listSwitch(),\n      shippingDetails\n    );\n\n    return listIterator(elements);\n  };\n\n  return (\n    <FormikContext.Provider value={formikBag}>\n      <Screen {...screenProps}>\n        <ScrollView>\n          <React.Fragment>{listDisplay()}</React.Fragment>\n          <View style={styles.spacer} />\n        </ScrollView>\n\n        <ProductStatusModal sheetRef={productStatusRef} />\n        <AvailabilityModal sheetRef={availabilityRef} />\n        <MeasurementModal sheetRef={measurementRef} />\n      </Screen>\n    </FormikContext.Provider>\n  );\n};\n\nexport default AddProductScreen;\n"]},"metadata":{},"sourceType":"module"}