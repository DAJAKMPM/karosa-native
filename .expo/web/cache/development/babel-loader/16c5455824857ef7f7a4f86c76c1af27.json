{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/components/picker/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Picker as ReactPicker } from \"@react-native-picker/picker\";\nimport { TextInput } from \"../input\";\nimport { theme } from \"../../styles\";\nimport { styles } from \"./styles\";\nexport var Picker = React.memo(function (_ref) {\n  var data = _ref.data,\n      placeholder = _ref.placeholder,\n      value = _ref.value,\n      _onValueChange = _ref.onValueChange;\n\n  var _useState = useState(value || placeholder),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedValue = _useState2[0],\n      setSelectedValue = _useState2[1];\n\n  useEffect(function () {\n    if (!value) {\n      setSelectedValue(placeholder);\n    }\n  }, [placeholder, value]);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: placeholder,\n    value: String(selectedValue),\n    style: selectedValue === placeholder ? styles.hintStyle : styles.inputStyle,\n    customStyles: styles.customStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), React.createElement(ReactPicker, {\n    mode: \"dialog\",\n    prompt: placeholder,\n    style: styles.picker,\n    selectedValue: selectedValue,\n    onValueChange: function onValueChange(itemValue, itemIndex) {\n      if (itemIndex > 0 && itemValue) {\n        setSelectedValue(String(itemValue));\n\n        if (_onValueChange) {\n          _onValueChange(itemValue, itemIndex);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(ReactPicker.Item, {\n    value: placeholder ? placeholder : \"\",\n    color: theme.colors.light10,\n    key: -1,\n    label: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }), data.map(function (targetData) {\n    return targetData.value && React.createElement(ReactPicker.Item, {\n      value: targetData.value,\n      key: targetData.id,\n      label: targetData.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    });\n  })));\n});","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/components/picker/index.tsx"],"names":["React","useEffect","useState","Picker","ReactPicker","TextInput","theme","styles","memo","data","placeholder","value","onValueChange","selectedValue","setSelectedValue","container","String","hintStyle","inputStyle","customStyle","picker","itemValue","itemIndex","colors","light10","map","targetData","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,MAAM,IAAIC,WAAnB,QAAsC,6BAAtC;AACA,SAASC,SAAT;AACA,SAASC,KAAT;AAGA,SAASC,MAAT;AAGA,OAAO,IAAMJ,MAAuB,GAAGH,KAAK,CAACQ,IAAN,CACrC,gBAAiD;AAAA,MAA9CC,IAA8C,QAA9CA,IAA8C;AAAA,MAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAApBC,cAAoB,QAApBA,aAAoB;;AAAA,kBACLV,QAAQ,CAACS,KAAK,IAAID,WAAV,CADH;AAAA;AAAA,MACxCG,aADwC;AAAA,MACzBC,gBADyB;;AAG/Cb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACU,KAAL,EAAY;AACVG,MAAAA,gBAAgB,CAACJ,WAAD,CAAhB;AACD;AACF,GAJQ,EAIN,CAACA,WAAD,EAAcC,KAAd,CAJM,CAAT;AAKA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACQ,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,WAAW,EAAEL,WADf;AAEE,IAAA,KAAK,EAAEM,MAAM,CAACH,aAAD,CAFf;AAGE,IAAA,KAAK,EACHA,aAAa,KAAKH,WAAlB,GAAgCH,MAAM,CAACU,SAAvC,GAAmDV,MAAM,CAACW,UAJ9D;AAME,IAAA,YAAY,EAAEX,MAAM,CAACY,WANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,MAAM,EAAET,WAFV;AAGE,IAAA,KAAK,EAAEH,MAAM,CAACa,MAHhB;AAIE,IAAA,aAAa,EAAEP,aAJjB;AAKE,IAAA,aAAa,EAAE,uBAACQ,SAAD,EAAYC,SAAZ,EAA0B;AACvC,UAAIA,SAAS,GAAG,CAAZ,IAAiBD,SAArB,EAAgC;AAC9BP,QAAAA,gBAAgB,CAACE,MAAM,CAACK,SAAD,CAAP,CAAhB;;AACA,YAAIT,cAAJ,EAAmB;AACjBA,UAAAA,cAAa,CAACS,SAAD,EAAYC,SAAZ,CAAb;AACD;AACF;AACF,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcE,oBAAC,WAAD,CAAa,IAAb;AACE,IAAA,KAAK,EAAEZ,WAAW,GAAGA,WAAH,GAAiB,EADrC;AAEE,IAAA,KAAK,EAAEJ,KAAK,CAACiB,MAAN,CAAaC,OAFtB;AAGE,IAAA,GAAG,EAAE,CAAC,CAHR;AAIE,IAAA,KAAK,EAAEd,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAoBGD,IAAI,CAACgB,GAAL,CAAS,UAACC,UAAD,EAAgB;AACxB,WACEA,UAAU,CAACf,KAAX,IACE,oBAAC,WAAD,CAAa,IAAb;AACE,MAAA,KAAK,EAAEe,UAAU,CAACf,KADpB;AAEE,MAAA,GAAG,EAAEe,UAAU,CAACC,EAFlB;AAGE,MAAA,KAAK,EAAED,UAAU,CAACf,KAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AASD,GAVA,CApBH,CATF,CADF;AA4CD,CArDoC,CAAhC","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Picker as ReactPicker } from \"@react-native-picker/picker\";\nimport { TextInput } from \"@app/components/input\";\nimport { theme } from \"@app/styles\";\nimport { PickerData } from \"@app/redux/api-models/common\";\n\nimport { styles } from \"./styles\";\nimport { Props } from \"./types\";\n\nexport const Picker: React.FC<Props> = React.memo(\n  ({ data, placeholder, value, onValueChange }) => {\n    const [selectedValue, setSelectedValue] = useState(value || placeholder);\n\n    useEffect(() => {\n      if (!value) {\n        setSelectedValue(placeholder);\n      }\n    }, [placeholder, value]);\n    return (\n      <View style={styles.container}>\n        <TextInput\n          placeholder={placeholder}\n          value={String(selectedValue)}\n          style={\n            selectedValue === placeholder ? styles.hintStyle : styles.inputStyle\n          }\n          customStyles={styles.customStyle}\n        />\n        <ReactPicker\n          mode=\"dialog\"\n          prompt={placeholder}\n          style={styles.picker}\n          selectedValue={selectedValue}\n          onValueChange={(itemValue, itemIndex) => {\n            if (itemIndex > 0 && itemValue) {\n              setSelectedValue(String(itemValue));\n              if (onValueChange) {\n                onValueChange(itemValue, itemIndex);\n              }\n            }\n          }}\n        >\n          <ReactPicker.Item\n            value={placeholder ? placeholder : \"\"}\n            color={theme.colors.light10}\n            key={-1}\n            label={placeholder}\n          />\n          {data.map((targetData) => {\n            return (\n              targetData.value && (\n                <ReactPicker.Item\n                  value={targetData.value}\n                  key={targetData.id}\n                  label={targetData.value}\n                />\n              )\n            );\n          })}\n        </ReactPicker>\n      </View>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}