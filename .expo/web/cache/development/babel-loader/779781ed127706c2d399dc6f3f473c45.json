{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-checkbox/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useField } from \"formik\";\nimport { CheckBox } from \"react-native-elements\";\nimport { theme } from \"../../../styles\";\nexport var FormCheckbox = React.memo(function (_ref) {\n  var label = _ref.label,\n      name = _ref.name;\n\n  var _useField = useField(name),\n      _useField2 = _slicedToArray(_useField, 3),\n      meta = _useField2[1],\n      helpers = _useField2[2];\n\n  var _useState = useState(meta.value || meta.initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentValue = _useState2[0],\n      setCurrentValue = _useState2[1];\n\n  useEffect(function () {\n    helpers.setValue(currentValue);\n  }, [currentValue]);\n  var handlePress = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setCurrentValue(function (prev) {\n              return !prev;\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(helpers.setTouched(true));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [helpers]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(CheckBox, {\n    checked: currentValue,\n    title: label,\n    onPress: handlePress,\n    checkedColor: theme.colors.primary,\n    titleProps: {\n      style: _objectSpread(_objectSpread({}, theme.textRegular), {}, {\n        fontWeight: \"400\",\n        marginLeft: 8\n      })\n    },\n    containerStyle: {\n      backgroundColor: \"transparent\",\n      borderWidth: 0,\n      margin: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n});\nFormCheckbox.displayName = \"FormCheckbox\";","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-checkbox/index.tsx"],"names":["React","useState","useEffect","useCallback","useField","CheckBox","theme","FormCheckbox","memo","label","name","meta","helpers","value","initialValue","currentValue","setCurrentValue","setValue","handlePress","prev","setTouched","colors","primary","style","textRegular","fontWeight","marginLeft","backgroundColor","borderWidth","margin","displayName"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,KAAT;AAIA,OAAO,IAAMC,YAA6B,GAAGP,KAAK,CAACQ,IAAN,CAAW,gBAAqB;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACjDN,QAAQ,CAACM,IAAD,CADyC;AAAA;AAAA,MAClEC,IADkE;AAAA,MAC5DC,OAD4D;;AAAA,kBAGnCX,QAAQ,CAC9CU,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,YAD2B,CAH2B;AAAA;AAAA,MAGpEC,YAHoE;AAAA,MAGtDC,eAHsD;;AAO3Ed,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,OAAO,CAACK,QAAR,CAAiBF,YAAjB;AAED,GAHQ,EAGN,CAACA,YAAD,CAHM,CAAT;AAKA,MAAMG,WAAW,GAAGf,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAC9Ba,YAAAA,eAAe,CAAC,UAACG,IAAD;AAAA,qBAAmB,CAACA,IAApB;AAAA,aAAD,CAAf;AAD8B;AAAA,6CAExBP,OAAO,CAACQ,UAAR,CAAmB,IAAnB,CAFwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAG5B,CAACR,OAAD,CAH4B,CAA/B;AAKA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAEG,YADX;AAEE,IAAA,KAAK,EAAEN,KAFT;AAGE,IAAA,OAAO,EAAES,WAHX;AAIE,IAAA,YAAY,EAAEZ,KAAK,CAACe,MAAN,CAAaC,OAJ7B;AAKE,IAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,kCAAOjB,KAAK,CAACkB,WAAb;AAA0BC,QAAAA,UAAU,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE;AAAzD;AADK,KALd;AAQE,IAAA,cAAc,EAAE;AACdC,MAAAA,eAAe,EAAE,aADH;AAEdC,MAAAA,WAAW,EAAE,CAFC;AAGdC,MAAAA,MAAM,EAAE;AAHM,KARlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAkBD,CAnC4C,CAAtC;AAqCPtB,YAAY,CAACuB,WAAb,GAA2B,cAA3B","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useField } from \"formik\";\nimport { CheckBox } from \"react-native-elements\";\nimport { theme } from \"@app/styles\";\n\nimport { Props } from \"./types\";\n\nexport const FormCheckbox: React.FC<Props> = React.memo(({ label, name }) => {\n  const [, meta, helpers] = useField(name);\n\n  const [currentValue, setCurrentValue] = useState<boolean>(\n    meta.value || meta.initialValue\n  );\n\n  useEffect(() => {\n    helpers.setValue(currentValue);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentValue]);\n\n  const handlePress = useCallback(async () => {\n    setCurrentValue((prev: boolean) => !prev);\n    await helpers.setTouched(true);\n  }, [helpers]);\n\n  return (\n    <React.Fragment>\n      <CheckBox\n        checked={currentValue}\n        title={label}\n        onPress={handlePress}\n        checkedColor={theme.colors.primary}\n        titleProps={{\n          style: { ...theme.textRegular, fontWeight: \"400\", marginLeft: 8 },\n        }}\n        containerStyle={{\n          backgroundColor: \"transparent\",\n          borderWidth: 0,\n          margin: 0,\n        }}\n      />\n    </React.Fragment>\n  );\n});\n\nFormCheckbox.displayName = \"FormCheckbox\";\n"]},"metadata":{},"sourceType":"module"}