{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-input/index.tsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useFormikContext, useField } from \"formik\";\nimport { theme } from \"../../../styles\";\nimport { TextInput } from \"../../input\";\nexport var FormInput = React.memo(function (_ref) {\n  var name = _ref.name,\n      props = _objectWithoutProperties(_ref, [\"name\"]);\n\n  var _useField = useField(name),\n      _useField2 = _slicedToArray(_useField, 3),\n      meta = _useField2[1],\n      helpers = _useField2[2];\n\n  var _useFormikContext = useFormikContext(),\n      validateOnChange = _useFormikContext.validateOnChange;\n\n  var _useState = useState(meta.value || meta.initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentValue = _useState2[0],\n      setCurrentValue = _useState2[1];\n\n  useEffect(function () {\n    setCurrentValue(meta.value);\n  }, [meta.value]);\n  var handleChange = useCallback(function _callee(text) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setCurrentValue(text);\n\n            if (!validateOnChange) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(helpers.setValue(text));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(helpers.setTouched(true));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [helpers, validateOnChange]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, _extends({\n    value: currentValue,\n    onChangeText: handleChange,\n    customStyles: {\n      borderColor: meta.touched && meta.error ? theme.colors.red15 : theme.colors.dark30\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  })));\n});\nFormInput.displayName = \"FormInput\";","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-input/index.tsx"],"names":["React","useState","useEffect","useCallback","useFormikContext","useField","theme","TextInput","FormInput","memo","name","props","meta","helpers","validateOnChange","value","initialValue","currentValue","setCurrentValue","handleChange","text","setValue","setTouched","borderColor","touched","error","colors","red15","dark30","displayName"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,QAA3C;AACA,SAASC,KAAT;AAEA,SAASC,SAAT;AAIA,OAAO,IAAMC,SAA0B,GAAGR,KAAK,CAACS,IAAN,CAAW,gBAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAZC,KAAY;;AAAA,kBACjDN,QAAQ,CAACK,IAAD,CADyC;AAAA;AAAA,MAClEE,IADkE;AAAA,MAC5DC,OAD4D;;AAAA,0BAE9CT,gBAAgB,EAF8B;AAAA,MAEnEU,gBAFmE,qBAEnEA,gBAFmE;;AAAA,kBAInCb,QAAQ,CAC9CW,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACI,YAD2B,CAJ2B;AAAA;AAAA,MAIpEC,YAJoE;AAAA,MAItDC,eAJsD;;AAQ3EhB,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,eAAe,CAACN,IAAI,CAACG,KAAN,CAAf;AACD,GAFQ,EAEN,CAACH,IAAI,CAACG,KAAN,CAFM,CAAT;AAIA,MAAMI,YAAY,GAAGhB,WAAW,CAC9B,iBAAOiB,IAAP;AAAA;AAAA;AAAA;AAAA;AACEF,YAAAA,eAAe,CAACE,IAAD,CAAf;;AADF,iBAGMN,gBAHN;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAIUD,OAAO,CAACQ,QAAR,CAAiBD,IAAjB,CAJV;;AAAA;AAAA;AAAA,6CAKUP,OAAO,CAACS,UAAR,CAAmB,IAAnB,CALV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD8B,EAS9B,CAACT,OAAD,EAAUC,gBAAV,CAT8B,CAAhC;AAYA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEG,YADT;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,YAAY,EAAE;AACZI,MAAAA,WAAW,EACTX,IAAI,CAACY,OAAL,IAAgBZ,IAAI,CAACa,KAArB,GACInB,KAAK,CAACoB,MAAN,CAAaC,KADjB,GAEIrB,KAAK,CAACoB,MAAN,CAAaE;AAJP;AAHhB,KASMjB,KATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAeD,CAvCyC,CAAnC;AAyCPH,SAAS,CAACqB,WAAV,GAAwB,WAAxB","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useFormikContext, useField } from \"formik\";\nimport { theme } from \"@app/styles\";\n\nimport { TextInput } from \"../../input\";\n\nimport { Props } from \"./types\";\n\nexport const FormInput: React.FC<Props> = React.memo(({ name, ...props }) => {\n  const [, meta, helpers] = useField(name);\n  const { validateOnChange } = useFormikContext();\n\n  const [currentValue, setCurrentValue] = useState(\n    meta.value || meta.initialValue\n  );\n\n  useEffect(() => {\n    setCurrentValue(meta.value);\n  }, [meta.value]);\n\n  const handleChange = useCallback(\n    async (text: string) => {\n      setCurrentValue(text);\n\n      if (validateOnChange) {\n        await helpers.setValue(text);\n        await helpers.setTouched(true);\n      }\n    },\n    [helpers, validateOnChange]\n  );\n\n  return (\n    <React.Fragment>\n      <TextInput\n        value={currentValue}\n        onChangeText={handleChange}\n        customStyles={{\n          borderColor:\n            meta.touched && meta.error\n              ? theme.colors.red15\n              : theme.colors.dark30,\n        }}\n        {...props}\n      />\n    </React.Fragment>\n  );\n});\n\nFormInput.displayName = \"FormInput\";\n"]},"metadata":{},"sourceType":"module"}