{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/screens/auth/login/index.tsx\";\nimport React, { useEffect, useCallback } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useDispatch } from \"react-redux\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { FormInput } from \"../../../components/formik/form-input\";\nimport { SubmitButton } from \"../../../components/formik/submit-button\";\nimport { BaseText } from \"../../../components/base-text\";\nimport { Screen } from \"../../../components/base-screen\";\nimport { actions, selectors } from \"../../../redux/auth\";\nimport { useAuth, useMemoizedSelector } from \"../../../hooks\";\nimport routes from \"../../../navigators/routes\";\nimport { styles } from \"./styles\";\nimport { validationSchema } from \"./validation\";\n\nvar LoginScreen = function LoginScreen() {\n  var _useNavigation = useNavigation(),\n      navigate = _useNavigation.navigate;\n\n  var _useAuth = useAuth(),\n      isLoggedIn = _useAuth.isLoggedIn;\n\n  var dispatch = useDispatch();\n  var callLoginApi = useCallback(function (request) {\n    return dispatch(actions.callLoginApi.request(request));\n  }, [dispatch]);\n  useEffect(function () {\n    if (isLoggedIn) navigate(\"Home\", {\n      screen: routes.ACCOUNTS_MAIN\n    });\n  }, [isLoggedIn]);\n  var loginResponse = useMemoizedSelector(selectors.getLoginResponse);\n  var formikBag = useFormik({\n    initialValues: {\n      identifier: \"\",\n      password: \"\"\n    },\n    validateOnChange: true,\n    validateOnBlur: true,\n    onSubmit: function onSubmit(values) {\n      var request = {\n        identifier: values.identifier,\n        password: values.password\n      };\n      callLoginApi(request);\n    },\n    validationSchema: validationSchema\n  });\n  var screenProps = {\n    header: {\n      iconName: \"arrow-back\",\n      title: \"Login\",\n      borderBottom: false,\n      press: {\n        left: function left() {\n          return navigate(routes.AUTH_MAIN);\n        }\n      }\n    },\n    isLoading: loginResponse.isLoading,\n    customStyles: styles.container\n  };\n  var identifierProps = {\n    name: \"identifier\",\n    placeholder: \"Phone number / Username / Email\",\n    textContentType: \"username\" || \"telephoneNumber\"\n  };\n  var passwordProps = {\n    name: \"password\",\n    placeholder: \"Password\",\n    textContentType: \"password\",\n    secureTextEntry: true\n  };\n  var loginButtonProps = {\n    title: \"Login\",\n    margin: 6\n  };\n  return React.createElement(FormikContext.Provider, {\n    value: formikBag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, React.createElement(Screen, _extends({}, screenProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.logoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../../../../assets/logo-red.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  })), React.createElement(FormInput, _extends({}, identifierProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), React.createElement(FormInput, _extends({}, passwordProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })), React.createElement(SubmitButton, _extends({}, loginButtonProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigate(routes.AUTH_FORGOT);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, React.createElement(BaseText, {\n    customStyles: styles.txtForgotPass,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"I forgot my password\"))));\n};\n\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/screens/auth/login/index.tsx"],"names":["React","useEffect","useCallback","useDispatch","FormikContext","useFormik","useNavigation","FormInput","SubmitButton","BaseText","Screen","actions","selectors","useAuth","useMemoizedSelector","routes","styles","validationSchema","LoginScreen","navigate","isLoggedIn","dispatch","callLoginApi","request","screen","ACCOUNTS_MAIN","loginResponse","getLoginResponse","formikBag","initialValues","identifier","password","validateOnChange","validateOnBlur","onSubmit","values","screenProps","header","iconName","title","borderBottom","press","left","AUTH_MAIN","isLoading","customStyles","container","identifierProps","name","placeholder","textContentType","passwordProps","secureTextEntry","loginButtonProps","margin","logoContainer","logo","require","AUTH_FORGOT","txtForgotPass"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport { View, Image, TouchableOpacity } from \"react-native\";\nimport { useDispatch } from \"react-redux\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { FormInput } from \"@app/components/formik/form-input\";\nimport { SubmitButton } from \"@app/components/formik/submit-button\";\nimport { BaseText } from \"@app/components/base-text\";\nimport { Screen } from \"@app/components/base-screen\";\nimport { actions, selectors } from \"@app/redux/auth\";\nimport { useAuth, useMemoizedSelector } from \"@app/hooks\";\nimport { LoginRequest } from \"@app/redux/auth/models\";\nimport { Props as ScreenProps } from \"@app/components/base-screen/types\";\nimport { Props as SubmitButtonProps } from \"@app/components/formik/submit-button/types\";\nimport { Props as FormInputProps } from \"@app/components/formik/form-input/types\";\nimport routes from \"@app/navigators/routes\";\n\nimport { styles } from \"./styles\";\nimport { validationSchema } from \"./validation\";\n\nconst LoginScreen: React.FC = () => {\n  const { navigate } = useNavigation();\n  const { isLoggedIn } = useAuth();\n  const dispatch = useDispatch();\n\n  const callLoginApi = useCallback(\n    (request: LoginRequest) => dispatch(actions.callLoginApi.request(request)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (isLoggedIn) navigate(\"Home\", { screen: routes.ACCOUNTS_MAIN });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoggedIn]);\n\n  const loginResponse = useMemoizedSelector(selectors.getLoginResponse);\n\n  const formikBag = useFormik({\n    initialValues: { identifier: \"\", password: \"\" },\n    validateOnChange: true,\n    validateOnBlur: true,\n    onSubmit: (values) => {\n      const request: LoginRequest = {\n        identifier: values.identifier,\n        password: values.password,\n      };\n\n      callLoginApi(request);\n    },\n    validationSchema,\n  });\n\n  const screenProps: ScreenProps = {\n    header: {\n      iconName: \"arrow-back\",\n      title: \"Login\",\n      borderBottom: false,\n      press: {\n        left: () => navigate(routes.AUTH_MAIN),\n      },\n    },\n    isLoading: loginResponse.isLoading,\n    customStyles: styles.container,\n  };\n\n  const identifierProps: FormInputProps = {\n    name: \"identifier\",\n    placeholder: \"Phone number / Username / Email\",\n    textContentType: \"username\" || \"telephoneNumber\",\n  };\n\n  const passwordProps: FormInputProps = {\n    name: \"password\",\n    placeholder: \"Password\",\n    textContentType: \"password\",\n    secureTextEntry: true,\n  };\n\n  const loginButtonProps: SubmitButtonProps = {\n    title: \"Login\",\n    margin: 6,\n  };\n\n  return (\n    <FormikContext.Provider value={formikBag}>\n      <Screen {...screenProps}>\n        <View style={styles.logoContainer}>\n          <Image\n            style={styles.logo}\n            source={require(\"../../../../assets/logo-red.png\")}\n          />\n        </View>\n\n        <FormInput {...identifierProps} />\n        <FormInput {...passwordProps} />\n        <SubmitButton {...loginButtonProps} />\n\n        <TouchableOpacity onPress={() => navigate(routes.AUTH_FORGOT)}>\n          <BaseText customStyles={styles.txtForgotPass}>\n            I forgot my password\n          </BaseText>\n        </TouchableOpacity>\n      </Screen>\n    </FormikContext.Provider>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}