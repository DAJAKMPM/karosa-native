{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\nimport * as data from \"./data\";\nexport var loginResponse = produce(function (draft, action) {\n  switch (action.type) {\n    case getType(actions.callLoginApi.request):\n      draft.response = data.initAuthState.loginResponse.response;\n      draft.isLoading = true;\n      return draft;\n\n    case getType(actions.callLoginApi.success):\n      draft.response = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    case getType(actions.callLoginApi.failure):\n      draft.error = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    default:\n      return draft;\n  }\n}, data.initAuthState.loginResponse);\nexport var registerResponse = produce(function (draft, action) {\n  switch (action.type) {\n    case getType(actions.callRegisterApi.request):\n      draft.response = data.initAuthState.registerResponse.response;\n      draft.isLoading = true;\n      return draft;\n\n    case getType(actions.callRegisterApi.success):\n      draft.response = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    case getType(actions.callRegisterApi.failure):\n      draft.error = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    default:\n      return draft;\n  }\n}, data.initAuthState.registerResponse);\nexport var forgotResponse = produce(function (draft, action) {\n  switch (action.type) {\n    case getType(actions.callForgotApi.request):\n      draft.response = data.initAuthState.forgotResponse.response;\n      draft.isLoading = true;\n      return draft;\n\n    case getType(actions.callForgotApi.success):\n      draft.response = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    case getType(actions.callForgotApi.failure):\n      draft.error = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    default:\n      return draft;\n  }\n}, data.initAuthState.forgotResponse);\nexport var myAddressResponse = produce(function (draft, action) {\n  switch (action.type) {\n    case getType(actions.callMyAddressApi.request):\n      draft.isLoading = true;\n      return draft;\n\n    case getType(actions.callMyAddressApi.success):\n      draft.response = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    case getType(actions.callMyAddressApi.failure):\n      draft.error = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    default:\n      return draft;\n  }\n}, data.initAuthState.myAddressResponse);\nexport var newAddressResponse = produce(function (draft, action) {\n  switch (action.type) {\n    case getType(actions.callNewAddressApi.request):\n      draft.isLoading = true;\n      return draft;\n\n    case getType(actions.callNewAddressApi.success):\n      draft.response = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    case getType(actions.callNewAddressApi.failure):\n      draft.error = action.payload;\n      draft.isLoading = false;\n      return draft;\n\n    default:\n      return draft;\n  }\n}, data.initAuthState.newAddressResponse);\nvar reducer = combineReducers({\n  loginResponse: loginResponse,\n  forgotResponse: forgotResponse,\n  myAddressResponse: myAddressResponse,\n  newAddressResponse: newAddressResponse\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/redux/auth/reducers.ts"],"names":["combineReducers","produce","getType","actions","data","loginResponse","draft","action","type","callLoginApi","request","response","initAuthState","isLoading","success","payload","failure","error","registerResponse","callRegisterApi","forgotResponse","callForgotApi","myAddressResponse","callMyAddressApi","newAddressResponse","callNewAddressApi","reducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport produce, { Draft } from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { ActionType } from \"typesafe-actions/dist/type-helpers\";\n\nimport { ResponseState } from \"../api-models/common\";\n\nimport * as actions from \"./actions\";\nimport * as models from \"./models\";\nimport * as data from \"./data\";\n\nexport const loginResponse = produce(\n  (\n    draft: Draft<ResponseState<models.LoginResponse>>,\n    action: ActionType<typeof actions>\n  ) => {\n    switch (action.type) {\n      case getType(actions.callLoginApi.request):\n        draft.response = data.initAuthState.loginResponse.response;\n        draft.isLoading = true;\n        return draft;\n      case getType(actions.callLoginApi.success):\n        draft.response = action.payload;\n        draft.isLoading = false;\n        return draft;\n      case getType(actions.callLoginApi.failure):\n        draft.error = action.payload;\n        draft.isLoading = false;\n        return draft;\n      default:\n        return draft;\n    }\n  },\n  data.initAuthState.loginResponse\n);\n\nexport const registerResponse = produce(\n  (\n    draft: Draft<ResponseState<models.RegisterResponse>>,\n    action: ActionType<typeof actions>\n  ) => {\n    switch (action.type) {\n      case getType(actions.callRegisterApi.request):\n        draft.response = data.initAuthState.registerResponse.response;\n        draft.isLoading = true;\n        return draft;\n      case getType(actions.callRegisterApi.success):\n        draft.response = action.payload;\n        draft.isLoading = false;\n        return draft;\n      case getType(actions.callRegisterApi.failure):\n        draft.error = action.payload;\n        draft.isLoading = false;\n        return draft;\n      default:\n        return draft;\n    }\n  },\n  data.initAuthState.registerResponse\n);\n\nexport const forgotResponse = produce(\n  (\n    draft: Draft<ResponseState<models.ForgotResponse>>,\n    action: ActionType<typeof actions>\n  ) => {\n    switch (action.type) {\n      case getType(actions.callForgotApi.request):\n        draft.response = data.initAuthState.forgotResponse.response;\n        draft.isLoading = true;\n        return draft;\n      case getType(actions.callForgotApi.success):\n        draft.response = action.payload;\n        draft.isLoading = false;\n        return draft;\n      case getType(actions.callForgotApi.failure):\n        draft.error = action.payload;\n        draft.isLoading = false;\n        return draft;\n      default:\n        return draft;\n    }\n  },\n  data.initAuthState.forgotResponse\n);\n\nexport const myAddressResponse = produce(\n  (\n    draft: Draft<ResponseState<models.MyAddressResponse>>,\n    action: ActionType<typeof actions>\n  ) => {\n    switch (action.type) {\n      case getType(actions.callMyAddressApi.request):\n        draft.isLoading = true;\n        return draft;\n      case getType(actions.callMyAddressApi.success):\n        draft.response = action.payload;\n        draft.isLoading = false;\n        return draft;\n      case getType(actions.callMyAddressApi.failure):\n        draft.error = action.payload;\n        draft.isLoading = false;\n        return draft;\n      default:\n        return draft;\n    }\n  },\n  data.initAuthState.myAddressResponse\n);\n\nexport const newAddressResponse = produce(\n  (\n    draft: Draft<ResponseState<models.NewAddressResponse>>,\n    action: ActionType<typeof actions>\n  ) => {\n    switch (action.type) {\n      case getType(actions.callNewAddressApi.request):\n        draft.isLoading = true;\n        return draft;\n      case getType(actions.callNewAddressApi.success):\n        draft.response = action.payload;\n        draft.isLoading = false;\n        return draft;\n      case getType(actions.callNewAddressApi.failure):\n        draft.error = action.payload;\n        draft.isLoading = false;\n        return draft;\n      default:\n        return draft;\n    }\n  },\n  data.initAuthState.newAddressResponse\n);\n\nconst reducer = combineReducers({\n  loginResponse,\n  forgotResponse,\n  myAddressResponse,\n  newAddressResponse,\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}