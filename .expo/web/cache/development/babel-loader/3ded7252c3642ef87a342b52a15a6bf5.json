{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-image/index.tsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useFormikContext, useField } from \"formik\";\nimport { ImagePicker } from \"../../image-picker\";\nexport var FormImage = React.memo(function (_ref) {\n  var name = _ref.name;\n\n  var _useField = useField(name),\n      _useField2 = _slicedToArray(_useField, 3),\n      meta = _useField2[1],\n      helpers = _useField2[2];\n\n  var _useFormikContext = useFormikContext(),\n      validateOnChange = _useFormikContext.validateOnChange;\n\n  var _useState = useState(meta.value || meta.initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentValue = _useState2[0],\n      setCurrentValue = _useState2[1];\n\n  useEffect(function () {\n    setCurrentValue(meta.value);\n  }, [meta.value]);\n  var handleChange = useCallback(function _callee(img) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setCurrentValue(img);\n\n            if (!validateOnChange) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(helpers.setValue(img));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(helpers.setTouched(true));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [helpers, validateOnChange]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(ImagePicker, {\n    imageUri: currentValue,\n    onChangeImage: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n});\nFormImage.displayName = \"FormImage\";","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/components/formik/form-image/index.tsx"],"names":["React","useState","useEffect","useCallback","useFormikContext","useField","ImagePicker","FormImage","memo","name","meta","helpers","validateOnChange","value","initialValue","currentValue","setCurrentValue","handleChange","img","setValue","setTouched","displayName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,QAA3C;AACA,SAASC,WAAT;AAIA,OAAO,IAAMC,SAA0B,GAAGP,KAAK,CAACQ,IAAN,CAAW,gBAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACvCJ,QAAQ,CAACI,IAAD,CAD+B;AAAA;AAAA,MACxDC,IADwD;AAAA,MAClDC,OADkD;;AAAA,0BAEpCP,gBAAgB,EAFoB;AAAA,MAEzDQ,gBAFyD,qBAEzDA,gBAFyD;;AAAA,kBAIzBX,QAAQ,CAC9CS,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACI,YAD2B,CAJiB;AAAA;AAAA,MAI1DC,YAJ0D;AAAA,MAI5CC,eAJ4C;;AAQjEd,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,eAAe,CAACN,IAAI,CAACG,KAAN,CAAf;AACD,GAFQ,EAEN,CAACH,IAAI,CAACG,KAAN,CAFM,CAAT;AAIA,MAAMI,YAAY,GAAGd,WAAW,CAC9B,iBAAOe,GAAP;AAAA;AAAA;AAAA;AAAA;AACEF,YAAAA,eAAe,CAACE,GAAD,CAAf;;AADF,iBAGMN,gBAHN;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAIUD,OAAO,CAACQ,QAAR,CAAiBD,GAAjB,CAJV;;AAAA;AAAA;AAAA,6CAKUP,OAAO,CAACS,UAAR,CAAmB,IAAnB,CALV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD8B,EAS9B,CAACT,OAAD,EAAUC,gBAAV,CAT8B,CAAhC;AAYA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEG,YAAvB;AAAqC,IAAA,aAAa,EAAEE,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA7ByC,CAAnC;AA+BPV,SAAS,CAACc,WAAV,GAAwB,WAAxB","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useFormikContext, useField } from \"formik\";\nimport { ImagePicker } from \"@app/components/image-picker\";\n\nimport { Props } from \"./types\";\n\nexport const FormImage: React.FC<Props> = React.memo(({ name }) => {\n  const [, meta, helpers] = useField(name);\n  const { validateOnChange } = useFormikContext();\n\n  const [currentValue, setCurrentValue] = useState(\n    meta.value || meta.initialValue\n  );\n\n  useEffect(() => {\n    setCurrentValue(meta.value);\n  }, [meta.value]);\n\n  const handleChange = useCallback(\n    async (img: string) => {\n      setCurrentValue(img);\n\n      if (validateOnChange) {\n        await helpers.setValue(img);\n        await helpers.setTouched(true);\n      }\n    },\n    [helpers, validateOnChange]\n  );\n\n  return (\n    <React.Fragment>\n      <ImagePicker imageUri={currentValue} onChangeImage={handleChange} />\n    </React.Fragment>\n  );\n});\n\nFormImage.displayName = \"FormImage\";\n"]},"metadata":{},"sourceType":"module"}