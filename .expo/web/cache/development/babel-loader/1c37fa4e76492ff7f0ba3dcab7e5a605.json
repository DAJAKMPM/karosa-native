{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/screens/products/add-variation/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback } from \"react\";\nimport { Header } from \"react-native-elements\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { theme } from \"../../../styles\";\nimport { Screen } from \"../../../components/base-screen\";\nimport { ListInput } from \"../../../components/list/list-input\";\nimport { ListImage } from \"../../../components/list/list-image\";\nimport { SubmitButton } from \"../../../components/formik/submit-button\";\nimport { useMemoizedSelector } from \"../../../hooks\";\nimport { actions, selectors } from \"../../../redux/shop\";\nimport { validationSchema } from \"./validation\";\nimport { styles } from \"./styles\";\n\nvar AddVariationScreen = function AddVariationScreen() {\n  var dispatch = useDispatch();\n\n  var _useNavigation = useNavigation(),\n      goBack = _useNavigation.goBack;\n\n  var screenProps = {\n    customHeader: React.createElement(Header, {\n      containerStyle: {\n        backgroundColor: \"transparent\"\n      },\n      leftComponent: {\n        icon: \"arrow-back\",\n        color: theme.colors.primary,\n        onPress: goBack\n      },\n      centerComponent: {\n        text: \"Add Variation\",\n        style: _objectSpread(_objectSpread({}, theme.textRegular), {}, {\n          fontWeight: \"700\",\n          alignSelf: \"center\"\n        })\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }),\n    customStyles: styles.container\n  };\n  var setVariationForm = useCallback(function (values) {\n    return dispatch(actions.setVariationForm(values));\n  }, [dispatch]);\n  var variationForm = useMemoizedSelector(selectors.getVariationForm);\n  var formikBag = useFormik({\n    initialValues: variationForm,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      setVariationForm(values);\n      goBack();\n    }\n  });\n\n  var listInput = function listInput(name, orientation, label, placeholder) {\n    return React.createElement(ListInput, {\n      isColumn: orientation === \"column\" ? true : false,\n      isRow: orientation === \"row\" ? true : false,\n      hasBottomDivider: true,\n      maxLength: name === \"productNm\" ? 100 : 1000,\n      required: true,\n      name: name,\n      label: label,\n      placeholder: placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var listImage = function listImage() {\n    return React.createElement(ListImage, {\n      name: \"variationImg\",\n      hasBottomDivider: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 27\n      }\n    });\n  };\n\n  var listIterator = function listIterator(listItems) {\n    return listItems.map(function (item, key) {\n      return React.createElement(React.Fragment, {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, item);\n    });\n  };\n\n  var listDisplay = function listDisplay() {\n    var elements = [];\n    var price = listInput(\"price\", \"row\", \"Price\", \"Set price per product\");\n    var stocks = listInput(\"stocks\", \"row\", \"Stocks\", \"Set Stock\");\n    var productNm = listInput(\"productNm\", \"column\", \"Product Name\", \"Enter Product Name\");\n    var weight = listInput(\"weight\", \"row\", \"Weight per product\", \"Set Weight\");\n    elements.push(listImage(), productNm, price, weight, stocks);\n    return listIterator(elements);\n  };\n\n  var saveButtonProps = {\n    title: \"Save\"\n  };\n  return React.createElement(FormikContext.Provider, {\n    value: formikBag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, React.createElement(Screen, _extends({}, screenProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, listDisplay()), React.createElement(View, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, React.createElement(SubmitButton, _extends({}, saveButtonProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })))));\n};\n\nexport default AddVariationScreen;","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/screens/products/add-variation/index.tsx"],"names":["React","useCallback","Header","FormikContext","useFormik","useDispatch","useNavigation","theme","Screen","ListInput","ListImage","SubmitButton","useMemoizedSelector","actions","selectors","validationSchema","styles","AddVariationScreen","dispatch","goBack","screenProps","customHeader","backgroundColor","icon","color","colors","primary","onPress","text","style","textRegular","fontWeight","alignSelf","customStyles","container","setVariationForm","values","variationForm","getVariationForm","formikBag","initialValues","validateOnBlur","validateOnChange","onSubmit","listInput","name","orientation","label","placeholder","listImage","listIterator","listItems","map","item","key","listDisplay","elements","price","stocks","productNm","weight","push","saveButtonProps","title","buttonContainer"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { Header } from \"react-native-elements\";\nimport { View } from \"react-native\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { theme } from \"@app/styles\";\nimport { Screen } from \"@app/components/base-screen\";\nimport { ListInput } from \"@app/components/list/list-input\";\nimport { ListImage } from \"@app/components/list/list-image\";\nimport { SubmitButton } from \"@app/components/formik/submit-button\";\nimport { Props as ScreenProps } from \"@app/components/base-screen/types\";\nimport { Props as SubmitButtonProps } from \"@app/components/formik/submit-button/types\";\nimport { useMemoizedSelector } from \"@app/hooks\";\nimport { actions, selectors } from \"@app/redux/shop\";\nimport { VariationForm } from \"@app/redux/shop/models\";\n\nimport { validationSchema } from \"./validation\";\nimport { styles } from \"./styles\";\n\nconst AddVariationScreen: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { goBack } = useNavigation();\n\n  const screenProps: ScreenProps = {\n    customHeader: (\n      <Header\n        containerStyle={{ backgroundColor: \"transparent\" }}\n        leftComponent={{\n          icon: \"arrow-back\",\n          color: theme.colors.primary,\n          onPress: goBack,\n        }}\n        centerComponent={{\n          text: \"Add Variation\",\n          style: {\n            ...theme.textRegular,\n            fontWeight: \"700\",\n            alignSelf: \"center\",\n          },\n        }}\n      />\n    ),\n    customStyles: styles.container,\n  };\n\n  const setVariationForm = useCallback(\n    (values: VariationForm) => dispatch(actions.setVariationForm(values)),\n    [dispatch]\n  );\n\n  const variationForm = useMemoizedSelector(selectors.getVariationForm);\n\n  const formikBag = useFormik({\n    initialValues: variationForm,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validationSchema,\n    onSubmit: (values) => {\n      setVariationForm(values);\n      goBack();\n    },\n  });\n\n  const listInput = (\n    name: string,\n    orientation: string,\n    label: string,\n    placeholder: string\n  ): JSX.Element => {\n    return (\n      <ListInput\n        isColumn={orientation === \"column\" ? true : false}\n        isRow={orientation === \"row\" ? true : false}\n        hasBottomDivider\n        maxLength={name === \"productNm\" ? 100 : 1000}\n        required\n        name={name}\n        label={label}\n        placeholder={placeholder}\n      />\n    );\n  };\n\n  const listImage = () => <ListImage name={\"variationImg\"} hasBottomDivider />;\n\n  const listIterator = (listItems: React.ReactElement[]) => {\n    return listItems.map((item, key) => (\n      <React.Fragment key={key}>{item}</React.Fragment>\n    ));\n  };\n\n  const listDisplay = (): React.ReactElement[] => {\n    const elements: React.ReactElement[] = [];\n\n    const price = listInput(\"price\", \"row\", \"Price\", \"Set price per product\");\n    const stocks = listInput(\"stocks\", \"row\", \"Stocks\", \"Set Stock\");\n    const productNm = listInput(\n      \"productNm\",\n      \"column\",\n      \"Product Name\",\n      \"Enter Product Name\"\n    );\n    const weight = listInput(\n      \"weight\",\n      \"row\",\n      \"Weight per product\",\n      \"Set Weight\"\n    );\n\n    elements.push(listImage(), productNm, price, weight, stocks);\n\n    return listIterator(elements);\n  };\n\n  const saveButtonProps: SubmitButtonProps = {\n    title: \"Save\",\n  };\n\n  return (\n    <FormikContext.Provider value={formikBag}>\n      <Screen {...screenProps}>\n        <React.Fragment>{listDisplay()}</React.Fragment>\n\n        <View style={styles.buttonContainer}>\n          <SubmitButton {...saveButtonProps} />\n        </View>\n      </Screen>\n    </FormikContext.Provider>\n  );\n};\n\nexport default AddVariationScreen;\n"]},"metadata":{},"sourceType":"module"}