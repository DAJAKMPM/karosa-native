{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\nimport { usePromiseAll } from \"./use-promise-all\";\nexport var useLoadAssets = function useLoadAssets(assets, fonts) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  usePromiseAll([Font.loadAsync(fonts)].concat(_toConsumableArray(assets.map(function (asset) {\n    return Asset.loadAsync(asset);\n  }))), function () {\n    return setReady(true);\n  });\n  return ready;\n};","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/hooks/use-load-assets.ts"],"names":["useState","Asset","Font","usePromiseAll","useLoadAssets","assets","fonts","ready","setReady","loadAsync","map","asset"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAIA,SAASC,aAAT;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAmBC,KAAnB,EAAkD;AAAA,kBACnDN,QAAQ,CAAC,KAAD,CAD2C;AAAA;AAAA,MACtEO,KADsE;AAAA,MAC/DC,QAD+D;;AAG7EL,EAAAA,aAAa,EACVD,IAAI,CAACO,SAAL,CAAeH,KAAf,CADU,4BACgBD,MAAM,CAACK,GAAP,CAAW,UAACC,KAAD;AAAA,WAAWV,KAAK,CAACQ,SAAN,CAAgBE,KAAhB,CAAX;AAAA,GAAX,CADhB,IAGX;AAAA,WAAMH,QAAQ,CAAC,IAAD,CAAd;AAAA,GAHW,CAAb;AAMA,SAAOD,KAAP;AACD,CAVM","sourcesContent":["import { useState } from \"react\";\r\nimport { Asset } from \"expo-asset\";\r\nimport * as Font from \"expo-font\";\r\n\r\nimport { FontSource } from \"../components/load-assets/types\";\r\n\r\nimport { usePromiseAll } from \"./use-promise-all\";\r\n\r\nexport const useLoadAssets = (assets: number[], fonts: FontSource): boolean => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  usePromiseAll(\r\n    [Font.loadAsync(fonts), ...assets.map((asset) => Asset.loadAsync(asset))],\r\n\r\n    () => setReady(true)\r\n  );\r\n\r\n  return ready;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}