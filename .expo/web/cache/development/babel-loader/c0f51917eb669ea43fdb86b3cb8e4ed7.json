{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/valiant.lamban/Downloads/karosa-native/src/screens/user-account/new-address/index.tsx\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Screen } from \"../../../components/base-screen\";\nimport { useMemoizedSelector } from \"../../../hooks\";\nimport { actions } from \"../../../redux/auth\";\nimport { actions as regionActions, actions as provinceActions, actions as citiesActions, actions as barangayActions, selectors as locationSelector } from \"../../../redux/location\";\nimport { ListInput } from \"../../../components/list/list-input\";\nimport { SubmitButton } from \"../../../components/formik/submit-button\";\nimport { ListPicker } from \"../../../components/list/list-picker\";\nimport { ListCheckBox } from \"../../../components/list/list-checkbox\";\nimport { styles } from \"./styles\";\nimport { validationSchema } from \"./validation\";\n\nvar NewAddressScreen = function NewAddressScreen() {\n  var _useNavigation = useNavigation(),\n      goBack = _useNavigation.goBack;\n\n  var dispatch = useDispatch();\n  var callNewAddressApi = useCallback(function (request) {\n    return dispatch(actions.callNewAddressApi.request(request));\n  }, [dispatch]);\n  var getRegionResponse = useCallback(function () {\n    return dispatch(regionActions.callRegionApi.request());\n  }, [dispatch]);\n  var getProvinceResponse = useCallback(function (request) {\n    return dispatch(provinceActions.callProvinceApi.request(request));\n  }, [dispatch]);\n  var getCitiesResponse = useCallback(function (request) {\n    return dispatch(citiesActions.callCitiesApi.request(request));\n  }, [dispatch]);\n  var getBarangayResponse = useCallback(function (request) {\n    return dispatch(barangayActions.callBarangayApi.request(request));\n  }, [dispatch]);\n  useEffect(function () {\n    getRegionResponse();\n  }, []);\n  var formikBag = useFormik({\n    initialValues: {\n      fullName: \"\",\n      phoneNumber: \"\",\n      region: {\n        id: 0,\n        value: \"\"\n      },\n      province: {\n        id: 0,\n        value: \"\"\n      },\n      barangay: {\n        id: 0,\n        value: \"\"\n      },\n      cities: {\n        id: 0,\n        value: \"\"\n      },\n      detailedAddress: \"\",\n      defaultAddress: false\n    },\n    onSubmit: function onSubmit(values) {\n      var request = {\n        name: values.fullName,\n        phoneNo: values.phoneNumber,\n        detailed_address: values.detailedAddress + values.region.value + values.province.value + values.cities.value,\n        isDefaultAddress: values.defaultAddress,\n        barangayId: values.barangay.id\n      };\n      callNewAddressApi(request);\n    },\n    validationSchema: validationSchema\n  });\n  useEffect(function () {\n    var request = {\n      regionId: formikBag.values.region.id\n    };\n    getProvinceResponse(request);\n    formikBag.values.province = {\n      id: 0,\n      value: \"\"\n    };\n  }, [formikBag.values.region]);\n  useEffect(function () {\n    var request = {\n      provinceId: formikBag.values.province.id\n    };\n    getCitiesResponse(request);\n    formikBag.values.cities = {\n      id: 0,\n      value: \"\"\n    };\n  }, [formikBag.values.province]);\n  useEffect(function () {\n    var request = {\n      cityId: formikBag.values.cities.id\n    };\n    getBarangayResponse(request);\n    formikBag.values.barangay = {\n      id: 0,\n      value: \"\"\n    };\n  }, [formikBag.values.cities]);\n  var regionResponse = useMemoizedSelector(locationSelector.getRegionResponse);\n  var provinceResponse = useMemoizedSelector(locationSelector.getProvinceResponse);\n  var citiesResponse = useMemoizedSelector(locationSelector.getCitiesResponse);\n  var barangayResponse = useMemoizedSelector(locationSelector.getBarangayResponse);\n\n  var regionProp = function regionProp() {\n    var regionData = [];\n    regionResponse.map(function (data) {\n      regionData.push({\n        id: data.id,\n        value: data.name\n      });\n    });\n    return regionData;\n  };\n\n  var barangayProp = function barangayProp() {\n    var barangayData = [];\n    barangayResponse.map(function (data) {\n      barangayData.push({\n        id: data.id,\n        value: data.name\n      });\n    });\n    return barangayData;\n  };\n\n  var citiesProp = function citiesProp() {\n    var citiesData = [];\n    citiesResponse.map(function (data) {\n      citiesData.push({\n        id: data.id,\n        value: data.name\n      });\n    });\n    return citiesData;\n  };\n\n  var provinceProp = function provinceProp() {\n    var provinceData = [];\n    provinceResponse.map(function (data) {\n      provinceData.push({\n        id: data.id,\n        value: data.name\n      });\n    });\n    return provinceData;\n  };\n\n  var headerProps = {\n    header: {\n      iconName: \"arrow-back\",\n      title: \"New Address\",\n      press: {\n        left: function left() {\n          return goBack();\n        }\n      }\n    }\n  };\n  var submitButtonProps = {\n    title: \"Submit\",\n    containerStyle: styles.btnSubmtContainer,\n    textStyle: styles.txtBtnSubmit\n  };\n\n  var listInput = function listInput(name, orientation, label, placeholder) {\n    return React.createElement(ListInput, {\n      isColumn: orientation === \"column\" ? true : false,\n      isRow: orientation === \"row\" ? true : false,\n      hasBottomDivider: true,\n      required: false,\n      name: name,\n      label: label,\n      placeholder: placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var listCheckBox = function listCheckBox(name, label) {\n    return React.createElement(ListCheckBox, {\n      name: name,\n      label: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 12\n      }\n    });\n  };\n\n  var listInputPicker = function listInputPicker(name, label, placeholder, data) {\n    return React.createElement(React.Fragment, null, data && React.createElement(ListPicker, {\n      name: name,\n      label: label,\n      placeholder: placeholder,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }));\n  };\n\n  var listIterator = function listIterator(listItems) {\n    return listItems.map(function (item, key) {\n      return React.createElement(React.Fragment, {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 7\n        }\n      }, item);\n    });\n  };\n\n  var listDisplay = function listDisplay() {\n    var elements = [];\n    var fullName = listInput(\"fullName\", \"row\", \"Full Name\", \"Set Full Name\");\n    var phoneNumber = listInput(\"phoneNumber\", \"row\", \"Phone Number\", \"Set Phone Number\");\n    var region = listInputPicker(\"region\", \"Region\", \"Choose Region\", regionProp());\n    var province = listInputPicker(\"province\", \"Province\", \"Choose Province\", provinceProp());\n    var cities = listInputPicker(\"cities\", \"City\", \"Choose City\", citiesProp());\n    var barangay = listInputPicker(\"barangay\", \"Barangay\", \"Choose Barangay\", barangayProp());\n    var detailedAddress = listInput(\"detailedAddress\", \"column\", \"Set Detailed Address\", \"Unit Number, House Number, Building, Street Name\");\n    var defaultAddress = listCheckBox(\"defaultAddress\", \"Set as default address\");\n    elements.push(fullName, phoneNumber, region, province, cities, barangay, detailedAddress, defaultAddress);\n    return listIterator(elements);\n  };\n\n  return React.createElement(FormikContext.Provider, {\n    value: formikBag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 5\n    }\n  }, React.createElement(Screen, _extends({}, headerProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.addressContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }, listDisplay()), React.createElement(View, {\n    style: styles.submitbuttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }\n  }, React.createElement(SubmitButton, _extends({}, submitButtonProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 15\n    }\n  })))))));\n};\n\nexport default NewAddressScreen;","map":{"version":3,"sources":["/Users/valiant.lamban/Downloads/karosa-native/src/screens/user-account/new-address/index.tsx"],"names":["React","useCallback","useEffect","useNavigation","FormikContext","useFormik","useDispatch","ScrollView","Screen","useMemoizedSelector","actions","regionActions","provinceActions","citiesActions","barangayActions","selectors","locationSelector","ListInput","SubmitButton","ListPicker","ListCheckBox","styles","validationSchema","NewAddressScreen","goBack","dispatch","callNewAddressApi","request","getRegionResponse","callRegionApi","getProvinceResponse","callProvinceApi","getCitiesResponse","callCitiesApi","getBarangayResponse","callBarangayApi","formikBag","initialValues","fullName","phoneNumber","region","id","value","province","barangay","cities","detailedAddress","defaultAddress","onSubmit","values","name","phoneNo","detailed_address","isDefaultAddress","barangayId","regionId","provinceId","cityId","regionResponse","provinceResponse","citiesResponse","barangayResponse","regionProp","regionData","map","data","push","barangayProp","barangayData","citiesProp","citiesData","provinceProp","provinceData","headerProps","header","iconName","title","press","left","submitButtonProps","containerStyle","btnSubmtContainer","textStyle","txtBtnSubmit","listInput","orientation","label","placeholder","listCheckBox","listInputPicker","listIterator","listItems","item","key","listDisplay","elements","addressContainer","submitbuttonContainer"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { View } from \"react-native\";\nimport { FormikContext, useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Props as HeaderProps } from \"@app/components/base-screen/types\";\nimport { Screen } from \"@app/components/base-screen\";\nimport { useMemoizedSelector } from \"@app/hooks\";\nimport { Props as ButtonProps } from \"@app/components/button/types\";\nimport { actions } from \"@app/redux/auth\";\nimport {\n  actions as regionActions,\n  actions as provinceActions,\n  actions as citiesActions,\n  actions as barangayActions,\n  selectors as locationSelector,\n} from \"@app/redux/location\";\nimport { ListInput } from \"@app/components/list/list-input\";\nimport { SubmitButton } from \"@app/components/formik/submit-button\";\nimport { NewAddressRequest } from \"@app/redux/auth/models\";\nimport { ListPicker } from \"@app/components/list/list-picker\";\nimport { ListCheckBox } from \"@app/components/list/list-checkbox\";\nimport { PickerData } from \"@app/redux/api-models/common\";\nimport {\n  BarangayRequest,\n  CitiesRequest,\n  ProvinceRequest,\n} from \"@app/redux/location/models\";\n\nimport { styles } from \"./styles\";\nimport { validationSchema } from \"./validation\";\n\nconst NewAddressScreen: React.FC = () => {\n  const { goBack } = useNavigation();\n  const dispatch = useDispatch();\n\n  const callNewAddressApi = useCallback(\n    (request: NewAddressRequest) =>\n      dispatch(actions.callNewAddressApi.request(request)),\n    [dispatch]\n  );\n\n  const getRegionResponse = useCallback(\n    () => dispatch(regionActions.callRegionApi.request()),\n    [dispatch]\n  );\n\n  const getProvinceResponse = useCallback(\n    (request: ProvinceRequest) =>\n      dispatch(provinceActions.callProvinceApi.request(request)),\n    [dispatch]\n  );\n\n  const getCitiesResponse = useCallback(\n    (request: CitiesRequest) =>\n      dispatch(citiesActions.callCitiesApi.request(request)),\n    [dispatch]\n  );\n\n  const getBarangayResponse = useCallback(\n    (request: BarangayRequest) =>\n      dispatch(barangayActions.callBarangayApi.request(request)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    getRegionResponse();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const formikBag = useFormik({\n    initialValues: {\n      fullName: \"\",\n      phoneNumber: \"\",\n      region: { id: 0, value: \"\" } as PickerData,\n      province: { id: 0, value: \"\" } as PickerData,\n      barangay: { id: 0, value: \"\" } as PickerData,\n      cities: { id: 0, value: \"\" } as PickerData,\n      detailedAddress: \"\",\n      defaultAddress: false,\n    },\n\n    onSubmit: (values) => {\n      const request: NewAddressRequest = {\n        name: values.fullName,\n        phoneNo: values.phoneNumber,\n        // eslint-disable-next-line camelcase\n        detailed_address:\n          values.detailedAddress +\n          values.region.value +\n          values.province.value +\n          values.cities.value,\n        isDefaultAddress: values.defaultAddress,\n        barangayId: values.barangay.id,\n      };\n      callNewAddressApi(request);\n    },\n    validationSchema,\n  });\n\n  useEffect(() => {\n    const request: ProvinceRequest = {\n      regionId: formikBag.values.region.id,\n    };\n    getProvinceResponse(request);\n    formikBag.values.province = { id: 0, value: \"\" } as PickerData;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formikBag.values.region]);\n\n  useEffect(() => {\n    const request: CitiesRequest = {\n      provinceId: formikBag.values.province.id,\n    };\n    getCitiesResponse(request);\n    formikBag.values.cities = { id: 0, value: \"\" } as PickerData;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formikBag.values.province]);\n\n  useEffect(() => {\n    const request: BarangayRequest = {\n      cityId: formikBag.values.cities.id,\n    };\n    getBarangayResponse(request);\n    formikBag.values.barangay = { id: 0, value: \"\" } as PickerData;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formikBag.values.cities]);\n\n  const regionResponse = useMemoizedSelector(\n    locationSelector.getRegionResponse\n  );\n\n  const provinceResponse = useMemoizedSelector(\n    locationSelector.getProvinceResponse\n  );\n\n  const citiesResponse = useMemoizedSelector(\n    locationSelector.getCitiesResponse\n  );\n\n  const barangayResponse = useMemoizedSelector(\n    locationSelector.getBarangayResponse\n  );\n\n  const regionProp = () => {\n    const regionData: PickerData[] = [];\n    regionResponse.map((data) => {\n      regionData.push({ id: data.id, value: data.name });\n    });\n    return regionData;\n  };\n\n  const barangayProp = () => {\n    const barangayData: PickerData[] = [];\n    barangayResponse.map((data) => {\n      barangayData.push({ id: data.id, value: data.name });\n    });\n    return barangayData;\n  };\n\n  const citiesProp = () => {\n    const citiesData: PickerData[] = [];\n    citiesResponse.map((data) => {\n      citiesData.push({ id: data.id, value: data.name });\n    });\n    return citiesData;\n  };\n\n  const provinceProp = () => {\n    const provinceData: PickerData[] = [];\n    provinceResponse.map((data) => {\n      provinceData.push({ id: data.id, value: data.name });\n    });\n    return provinceData;\n  };\n\n  const headerProps: HeaderProps = {\n    header: {\n      iconName: \"arrow-back\",\n      title: \"New Address\",\n      press: {\n        left: () => goBack(),\n      },\n    },\n  };\n\n  const submitButtonProps: ButtonProps = {\n    title: \"Submit\",\n    containerStyle: styles.btnSubmtContainer,\n    textStyle: styles.txtBtnSubmit,\n  };\n\n  const listInput = (\n    name: string,\n    orientation: string,\n    label: string,\n    placeholder: string\n  ) => {\n    return (\n      <ListInput\n        isColumn={orientation === \"column\" ? true : false}\n        isRow={orientation === \"row\" ? true : false}\n        hasBottomDivider\n        required={false}\n        name={name}\n        label={label}\n        placeholder={placeholder}\n      />\n    );\n  };\n\n  const listCheckBox = (name: string, label: string) => {\n    return <ListCheckBox name={name} label={label} />;\n  };\n\n  const listInputPicker = (\n    name: string,\n    label: string,\n    placeholder: string,\n    data: PickerData[]\n  ): JSX.Element => {\n    return (\n      <>\n        {data && (\n          <ListPicker\n            name={name}\n            label={label}\n            placeholder={placeholder}\n            data={data}\n          />\n        )}\n      </>\n    );\n  };\n\n  const listIterator = (listItems: React.ReactElement[]) => {\n    return listItems.map((item, key) => (\n      <React.Fragment key={key}>{item}</React.Fragment>\n    ));\n  };\n\n  const listDisplay = () => {\n    const elements: React.ReactElement[] = [];\n\n    const fullName = listInput(\"fullName\", \"row\", \"Full Name\", \"Set Full Name\");\n    const phoneNumber = listInput(\n      \"phoneNumber\",\n      \"row\",\n      \"Phone Number\",\n      \"Set Phone Number\"\n    );\n\n    const region = listInputPicker(\n      \"region\",\n      \"Region\",\n      \"Choose Region\",\n      regionProp()\n    );\n\n    const province = listInputPicker(\n      \"province\",\n      \"Province\",\n      \"Choose Province\",\n      provinceProp()\n    );\n\n    const cities = listInputPicker(\n      \"cities\",\n      \"City\",\n      \"Choose City\",\n      citiesProp()\n    );\n\n    const barangay = listInputPicker(\n      \"barangay\",\n      \"Barangay\",\n      \"Choose Barangay\",\n      barangayProp()\n    );\n\n    const detailedAddress = listInput(\n      \"detailedAddress\",\n      \"column\",\n      \"Set Detailed Address\",\n      \"Unit Number, House Number, Building, Street Name\"\n    );\n\n    const defaultAddress = listCheckBox(\n      \"defaultAddress\",\n      \"Set as default address\"\n    );\n\n    elements.push(\n      fullName,\n      phoneNumber,\n      region,\n      province,\n      cities,\n      barangay,\n      detailedAddress,\n      defaultAddress\n    );\n\n    return listIterator(elements);\n  };\n\n  return (\n    <FormikContext.Provider value={formikBag}>\n      <Screen {...headerProps}>\n        <View style={styles.addressContainer}>\n          <ScrollView>\n            <React.Fragment>{listDisplay()}</React.Fragment>\n            <View style={styles.submitbuttonContainer}>\n              <SubmitButton {...submitButtonProps} />\n            </View>\n          </ScrollView>\n        </View>\n      </Screen>\n    </FormikContext.Provider>\n  );\n};\nexport default NewAddressScreen;\n"]},"metadata":{},"sourceType":"module"}